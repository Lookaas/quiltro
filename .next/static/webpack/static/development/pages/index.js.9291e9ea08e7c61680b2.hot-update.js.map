{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.9291e9ea08e7c61680b2.hot-update.js","sources":["webpack:///./components/canvas/Text/index.tsx"],"sourcesContent":["/** @jsx jsx */\r\nimport { jsx } from '@emotion/core';\r\nimport { KonvaEventObject } from 'konva/types/Node';\r\nimport React, { createRef } from 'react';\r\nimport { Text, Label, Tag, Group } from 'react-konva';\r\nimport { ITextBlocksConfigPanelState } from '../../LeftSideBar/TextBlocksCreator/panel';\r\nimport { ITextBlockElement } from '../../../pages'\r\n\r\ninterface ICanvasText extends ITextBlockElement {\r\n  maxWidth: number;\r\n  maxHeight: number;\r\n  // width: number;\r\n  // height: number;\r\n  onDoubleClick: (evt: KonvaEventObject<MouseEvent>) => void;\r\n  onClick: (evt: KonvaEventObject<MouseEvent>) => void;\r\n  onMouseDown: (evt: KonvaEventObject<MouseEvent>) => void;\r\n  id: string;\r\n}\r\n\r\nclass CanvasText extends React.Component<ICanvasText, any> {\r\n  static getDerivedStateFromProps(props: any) {\r\n    let stateFontSize = 10;\r\n    const { fontSize } = props;\r\n    if (fontSize === 'small') {\r\n      stateFontSize = 14;\r\n    }\r\n    if (fontSize === 'medium') {\r\n      stateFontSize = 21;\r\n    }\r\n    if (fontSize === 'large') {\r\n      stateFontSize = 35;\r\n    }\r\n    console.log();\r\n    return {\r\n      fontSize: stateFontSize\r\n    };\r\n  }\r\n\r\n  state = {\r\n    fontSize: 10\r\n  };\r\n\r\n  transformerRef = createRef<any>();\r\n\r\n  getNewPosition = (pos: {x: number, y: number}) => {\r\n    const { maxWidth, maxHeight } = this.props;\r\n    const ref = this.transformerRef.current!;\r\n\r\n    const topBorder = pos.y;\r\n    const bottomBorder = pos.y + ref.height();\r\n    const leftBorder = pos.x;\r\n    const rightBorder = pos.x + ref.width();\r\n\r\n    let x = pos.x;\r\n    let y = pos.y;\r\n    if (topBorder < 0) {\r\n      y = 0;\r\n    } else if (bottomBorder > maxHeight) {\r\n      y = maxHeight - ref.height();\r\n    }\r\n\r\n    if (leftBorder < 0) {\r\n      x = 0;\r\n    } else if (rightBorder > maxWidth) {\r\n      x = maxWidth - ref.width();\r\n    }\r\n    return {\r\n      x,\r\n      y\r\n    };\r\n  };\r\n\r\n  onTransform = () => {\r\n    const ref = this.transformerRef.current!;\r\n    ref.setAttrs({\r\n      scaleX: 1,\r\n      width: ref.width() * ref.scaleX()\r\n    });\r\n  };\r\n\r\n  onDrag = (pos: {x: number, y: number}) => {\r\n    return this.getNewPosition(pos);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      text,\r\n      color,\r\n      onDoubleClick,\r\n      onClick,\r\n      onMouseDown,\r\n      position,\r\n      align,\r\n      width,\r\n      style\r\n    } = this.props;\r\n    const { fontSize } = this.state;\r\n    return (\r\n      <Group>\r\n      <Label\r\n        x={position.x}\r\n        y={position.y}\r\n        draggable>\r\n        <Tag fill='#fff'/>\r\n        <Text\r\n        padding={10}\r\n        fontSize={fontSize}\r\n        ref={this.transformerRef}\r\n        name={id}\r\n        id={id}\r\n        fill={color}\r\n        text={text}\r\n        transformsEnabled=\"position\"\r\n        dragBoundFunc={this.onDrag}\r\n        onTransform={this.onTransform}\r\n        onClick={onClick}\r\n        onDblClick={onDoubleClick}\r\n        onMouseDown={onMouseDown}\r\n        align={align}\r\n        width={width}\r\n        fontStyle={style}\r\n        // _useStrictMode\r\n        />\r\n      </Label>\r\n      </Group>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CanvasText;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAcA;;;;;;;;;;;;;;;;;;AAmBA;AACA;AADA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;;;AA3GA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;;;;AAjBA;AACA;AA8GA;;;;A","sourceRoot":""}