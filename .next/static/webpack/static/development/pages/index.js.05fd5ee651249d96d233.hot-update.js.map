{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.05fd5ee651249d96d233.hot-update.js","sources":["webpack:///./pages/index.tsx"],"sourcesContent":["/** @jsx jsx */\r\nimport { jsx } from '@emotion/core';\r\nimport nanoid from 'nanoid';\r\nimport React, { Component, createRef } from 'react';\r\nimport Canvas from '../components/canvas';\r\nimport LeftSidebar from '../components/LeftSideBar';\r\nimport { ICharacteristicElement } from '../components/canvas/CharacteristicsLayer';\r\nimport Nav from '../components/Nav';\r\nimport { containerStyle, pageStyle } from './styles';\r\nimport * as icons from '../assets/icons';\r\n\r\ninterface IHomeState {\r\n  canvasImage: HTMLImageElement | null;\r\n  canvasTexts: ICanvasTexts;\r\n  formValues: IAdoptionForm;\r\n  characteristics: ICharacteristics;\r\n  canvasHeight: number;\r\n  canvasWidth: number;\r\n}\r\n\r\nexport interface ICanvasTexts {\r\n  selectedTextBlock: string; // TODO: Change this for a string union type\r\n  textBlocks: ITextBlocks\r\n}\r\n\r\ninterface ICharacteristics {\r\n  [priority: string] : ICharacteristicElement;\r\n}\r\n\r\ninterface ITextBlocks {\r\n    // TODO: Change keys on this objects also for a string uniion type.\r\n    // (Based on the types of TextBlocksCreator.buttonsKeys )\r\n    [s: string]: ITextBlockElement;\r\n}\r\n\r\nexport interface ITextBlockElement {\r\n  id: string;\r\n  text: string;\r\n  fontSize: 'small' | 'medium' | 'large';\r\n  color: 'black' | 'red' | 'green' | 'purple' | 'yellow' | 'white';\r\n  position: {\r\n    x: number;\r\n    y: number;\r\n  };\r\n  width?: number;\r\n  align?: 'left' | 'center' | 'right';\r\n  style?: 'normal' | 'bold' |  'italic';\r\n}\r\n\r\nexport interface IAdoptionForm {\r\n  'nombre-mascota': string;\r\n  'nombre-contacto': string;\r\n  'telefono-contacto': string;\r\n  'whatsapp-contacto': string;\r\n  'email-contacto': string;\r\n  'esterilizado': boolean;\r\n  'chip': boolean;\r\n  'vacunas': boolean;\r\n  'edad-mascota': string;\r\n  'informacion-extra-mascota'?: string;\r\n  'tamaño-mascota': string;\r\n  'caso-mascota': string;\r\n  'ciudad-contacto': string;\r\n  'sexo-mascota': string;\r\n}\r\n\r\nclass Home extends Component<any, IHomeState> {\r\n  state = {\r\n    canvasImage: null,\r\n    canvasTexts: {\r\n      selectedTextBlock : '',\r\n      textBlocks: {} as ITextBlocks\r\n    },\r\n    formValues: {\r\n      chip: false,\r\n      'edad-mascota': '',\r\n      'email-contacto': '',\r\n      esterilizado: false,\r\n      'informacion-extra-mascota': '',\r\n      'nombre-contacto': '',\r\n      'nombre-mascota': '',\r\n      'tamaño-mascota': '',\r\n      'telefono-contacto': '',\r\n      vacunas: false,\r\n      'whatsapp-contacto': '',\r\n      'caso-mascota': '',\r\n      'ciudad-contacto': '',\r\n      'sexo-mascota': ''\r\n    },\r\n    characteristics: {},\r\n    canvasHeight: 750,\r\n    canvasWidth: 500,\r\n  };\r\n\r\n  stageRef = createRef<any>();\r\n\r\n  componentDidMount() {\r\n    //this.addTextBlock();\r\n  }\r\n\r\n  setSelectedTextBlock = (selectedTextBlock: string) => {\r\n    const { canvasTexts } = this.state;\r\n    this.setState({\r\n      canvasTexts: {\r\n        ...canvasTexts,\r\n        selectedTextBlock\r\n      }\r\n    });\r\n  };\r\n\r\n  setCanvasImage = (image: HTMLImageElement) => {\r\n    this.setState({\r\n      canvasImage: image\r\n    });\r\n  };\r\n\r\n  onTextChanged = (key: string, value: string, id: string) => {\r\n    const { canvasTexts } = this.state;\r\n    const { textBlocks } = canvasTexts;\r\n    this.setState({\r\n      canvasTexts: {\r\n        ...canvasTexts,\r\n        textBlocks: {\r\n          ...textBlocks,\r\n          [id]: {\r\n            ...textBlocks[id],\r\n            [key]: value\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  onTextBlockChanged = (id: string, text: string) => {\r\n    const { canvasTexts } = this.state;\r\n    const { textBlocks } = canvasTexts;\r\n    this.setState(\r\n      {\r\n        canvasTexts: {\r\n          ...canvasTexts,\r\n          textBlocks: {\r\n            ...textBlocks,\r\n            [id]: {\r\n              ...textBlocks[id],\r\n              text\r\n            }\r\n          }\r\n        }\r\n      },\r\n      () => {\r\n        console.log(this.state);\r\n      }\r\n    );\r\n  };\r\n\r\n  setAdoptionFormField = (key: keyof IAdoptionForm, value: any) => {\r\n    const { canvasTexts, canvasHeight, canvasWidth, characteristics } = this.state;\r\n    const { textBlocks } = canvasTexts;\r\n    const actualCharacteristics: ICharacteristics = characteristics;\r\n    let newTextBlock: ITextBlockElement = {\r\n      id: key,\r\n      color: 'black',\r\n      text: value,\r\n      fontSize: 'medium',\r\n      position: {x: 0, y: 0}\r\n    }\r\n    let characteristic: ICharacteristicElement = {\r\n      priority: '',\r\n      text: '',\r\n      icon: ''\r\n    }\r\n    let validator: '' | 'textBlock' | 'characteristic' | 'deletedCharacteristic'= '';\r\n    switch (key) {\r\n      case 'nombre-mascota' :\r\n        newTextBlock.align = 'center';\r\n        newTextBlock.width = canvasWidth;\r\n        newTextBlock.position.y = canvasHeight*0.1;\r\n        newTextBlock.style = 'bold';\r\n        newTextBlock.fontSize = 'large';\r\n        validator = 'textBlock';\r\n        break;\r\n      case 'caso-mascota' :\r\n        newTextBlock.align = 'center';\r\n        newTextBlock.width = canvasWidth;\r\n        newTextBlock.position.y = canvasHeight*0.2;\r\n        newTextBlock.text = value === '1' ? \"En adopción\" : 'Perdido';\r\n        validator = 'textBlock';\r\n        break;\r\n      case 'edad-mascota' :\r\n        characteristic = {\r\n          priority: '0',\r\n          icon: icons.birthday_cake,\r\n          text: value\r\n        }\r\n        validator = 'characteristic';\r\n        break;\r\n      case 'sexo-mascota' :\r\n        characteristic = {\r\n          priority: '1',\r\n          icon: value === '1' ? icons.mars : icons.venus,\r\n          text: value === '1' ? 'Macho' : 'Hembra'\r\n        }\r\n        validator = 'characteristic';\r\n        break;\r\n      case 'tamaño-mascota' :\r\n        characteristic = {\r\n          priority: '3',\r\n          icon: icons.dog,\r\n          text: value === 's' ? 'Pequeño' : value === 'm' ? 'Mediano' : 'Grande'\r\n        }\r\n        validator = 'characteristic';\r\n        break;\r\n      case 'esterilizado' :\r\n        if(value) {\r\n          characteristic = {\r\n            priority: '4',\r\n            icon: icons.band_aid,\r\n            text: 'Esterilizado'\r\n          }\r\n          validator = 'characteristic';\r\n          break;\r\n        }\r\n        else {\r\n          delete actualCharacteristics['4'];\r\n          validator = 'deletedCharacteristic';\r\n          break;\r\n        }\r\n\r\n    }\r\n    if(validator === 'textBlock') {\r\n      this.setState({\r\n        formValues: {\r\n          ...this.state.formValues,\r\n          [key]: value\r\n        },\r\n        canvasTexts: {\r\n          ...canvasTexts,\r\n          textBlocks: {\r\n            ...textBlocks,\r\n            [key]: newTextBlock\r\n          }\r\n        }\r\n      });\r\n    }\r\n    else if (validator === 'characteristic') {\r\n      this.setState({\r\n        formValues: {\r\n          ...this.state.formValues,\r\n          [key]: value\r\n        },\r\n        characteristics: {\r\n          ...characteristics,\r\n          [characteristic.priority]: characteristic\r\n        }\r\n      });\r\n    }\r\n    else if (validator = 'deletedCharacteristic') {\r\n      this.setState({\r\n        formValues: {\r\n          ...this.state.formValues,\r\n          [key]: value\r\n        },\r\n        characteristics: actualCharacteristics\r\n      });\r\n    }\r\n  };\r\n\r\n  deleteCharacteristic = (characPriority: string) => {\r\n    const { characteristics } = this.state;\r\n    const actualCharacteristics: ICharacteristics = characteristics;\r\n    const updatePriority: ICharacteristics = {};\r\n    Object.keys(characteristics).forEach(priority => {\r\n      if (priority !== characPriority) {\r\n        updatePriority[priority] = actualCharacteristics[priority];\r\n      }\r\n    })\r\n  }\r\n\r\n  /*addTextBlock = () => {\r\n    const { canvasTexts } = this.state;\r\n    const { textBlocks } = canvasTexts;\r\n\r\n    const id = nanoid();\r\n    const newTextblock: ITextBlockElement = {\r\n      color: 'black',\r\n      fontSize: 'medium',\r\n      id,\r\n      text: ''\r\n    };\r\n\r\n    this.setState({\r\n      canvasTexts: {\r\n        ...canvasTexts,\r\n        textBlocks: {\r\n          ...textBlocks,\r\n          [id]: newTextblock\r\n        }\r\n      }\r\n    });\r\n  };*/\r\n\r\n  addTextBlockWithData = (newTextblock: ITextBlockElement) => {\r\n    const { canvasTexts } = this.state;\r\n    const { textBlocks } = canvasTexts;\r\n    const id = newTextblock.id;\r\n    this.setState({\r\n      canvasTexts: {\r\n        ...canvasTexts,\r\n        textBlocks: {\r\n          ...textBlocks,\r\n          [id]: newTextblock\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { canvasImage, canvasTexts, formValues, canvasHeight, canvasWidth, characteristics } = this.state;\r\n    const { selectedTextBlock, textBlocks } = canvasTexts;\r\n\r\n    return (\r\n      <div css={pageStyle}>\r\n        <Nav />\r\n        <section data-name=\"bodycontainer\" css={containerStyle}>\r\n          <LeftSidebar\r\n            canvasRef={this.stageRef}\r\n            formValues={formValues}\r\n            onTextBlockInteracted={this.setSelectedTextBlock}\r\n            selectedTextBlock={selectedTextBlock}\r\n            textBlocks={textBlocks}\r\n            onInputChanged={this.setAdoptionFormField}\r\n            onTextChanged={this.onTextChanged}\r\n            addTextBlockWithData={this.addTextBlockWithData}\r\n            onImageUploaded={this.setCanvasImage}\r\n          />\r\n          <Canvas\r\n            canvasRef={this.stageRef}\r\n            canvasTexts={canvasTexts}\r\n            currentCanvasText={textBlocks[selectedTextBlock]}\r\n            image={canvasImage}\r\n            onRef={this.stageRef}\r\n            onTextChanged={this.onTextBlockChanged}\r\n            onTextBlockSelected={this.setSelectedTextBlock}\r\n            canvasHeight={canvasHeight}\r\n            canvasWidth={canvasWidth}\r\n            characteristics={characteristics}\r\n          />\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAwDA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AAxBA;AACA;AA0BA;AACA;AAKA;AAAA;AACA;AACA;AACA;AAEA;AAFA;AADA;AAMA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAFA;AADA;AAYA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AAIA;AAJA;AAFA;AADA;AAaA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAvDA;AACA;AAwDA;AACA;AACA;AAIA;AAEA;AAFA;AALA;AAaA;AAEA;AACA;AAIA;AALA;AAUA;AAEA;AACA;AAIA;AALA;AAOA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAwBA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAEA;AAFA;AADA;AASA;AACA;;;;;;AA3NA;AAEA;;;AA0NA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;;;;AA5RA;AACA;AA8RA;;;;A","sourceRoot":""}