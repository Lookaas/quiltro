{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lucas\\\\Documents\\\\quiltros\\\\components\\\\LeftSideBar\\\\TextBlocksCreator\\\\panel.tsx\";\nvar __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/** @jsx jsx */\nimport { Button, ButtonGroup, FormGroup, Icon, TextArea } from '@blueprintjs/core';\nimport { jsx } from '@emotion/core';\nimport React from 'react';\nimport ColorSelector from '../ColorSelector';\nexport default class TextBlocksConfigPanel extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onMainTextChanged\", e => {\n      const {\n        onChange\n      } = this.props;\n      onChange('text', e.currentTarget.value);\n    });\n\n    _defineProperty(this, \"setHeight\", fontSize => {\n      const {\n        onChange\n      } = this.props;\n      onChange('fontSize', fontSize);\n    });\n\n    _defineProperty(this, \"setSelectedColor\", color => {\n      const {\n        onChange\n      } = this.props;\n      onChange('color', color);\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      fontSize,\n      color,\n      onMouseDown,\n      text\n    } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"fontSize\", \"color\", \"onMouseDown\", \"text\"]);\n\n    return jsx(\"section\", {\n      onMouseDown: onMouseDown,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, jsx(FormGroup, {\n      label: \"Texto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, jsx(TextArea, {\n      fill: true,\n      growVertically: true,\n      name: \"Texto\",\n      value: text,\n      onChange: this.onMainTextChanged,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    })), jsx(FormGroup, {\n      label: \"Tama\\xF1o\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, jsx(ButtonGroup, {\n      fill: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, jsx(Button, {\n      large: true,\n      active: fontSize === 'small',\n      onClick: () => this.setHeight('small'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, jsx(Icon, {\n      iconSize: 10,\n      icon: \"font\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    })), jsx(Button, {\n      large: true,\n      active: fontSize === 'medium',\n      onClick: () => this.setHeight('medium'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, jsx(Icon, {\n      iconSize: 16,\n      icon: \"font\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })), jsx(Button, {\n      large: true,\n      active: fontSize === 'large',\n      onClick: () => this.setHeight('large'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, jsx(Icon, {\n      iconSize: 24,\n      icon: \"font\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })))), jsx(FormGroup, {\n      label: \"Color\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, jsx(ButtonGroup, {\n      fill: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, TextBlocksConfigPanel.colors.map(el => jsx(ColorSelector, {\n      key: el,\n      color: el,\n      isActive: el === color,\n      onColorClicked: this.setSelectedColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    })))));\n  }\n\n}\n\n_defineProperty(TextBlocksConfigPanel, \"colors\", ['black', 'red', 'green', 'purple', 'yellow', 'white']);","map":{"version":3,"sources":["C:/Users/Lucas/Documents/quiltros/components/LeftSideBar/TextBlocksCreator/panel.tsx"],"names":["Button","ButtonGroup","FormGroup","Icon","TextArea","jsx","React","ColorSelector","TextBlocksConfigPanel","Component","e","onChange","props","currentTarget","value","fontSize","color","render","onMouseDown","text","rest","onMainTextChanged","setHeight","colors","map","el","setSelectedColor"],"mappings":"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","sourcesContent":["/** @jsx jsx */\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  FormGroup,\r\n  Icon,\r\n  TextArea\r\n} from '@blueprintjs/core';\r\nimport { jsx } from '@emotion/core';\r\nimport React, { FormEvent } from 'react';\r\nimport ColorSelector from '../ColorSelector';\r\n\r\nexport interface ITextBlocksConfigPanelProps\r\n  extends ITextBlocksConfigPanelState {\r\n  isSelected: boolean;\r\n  onChange: (key: string, value: string) => void;\r\n  onMouseDown: () => void;\r\n}\r\n\r\nexport interface ITextBlocksConfigPanelState {\r\n  id: string;\r\n  text: string;\r\n  fontSize: 'small' | 'medium' | 'large';\r\n  color: 'black' | 'red' | 'green' | 'purple' | 'yellow' | 'white';\r\n}\r\n\r\nexport default class TextBlocksConfigPanel extends React.Component<\r\n  ITextBlocksConfigPanelProps\r\n> {\r\n  static colors = ['black', 'red', 'green', 'purple', 'yellow', 'white'];\r\n\r\n  onMainTextChanged = (e: FormEvent<HTMLTextAreaElement>) => {\r\n    const { onChange } = this.props;\r\n    onChange('text', e.currentTarget.value);\r\n  };\r\n\r\n  setHeight = (fontSize: string) => {\r\n    const { onChange } = this.props;\r\n    onChange('fontSize', fontSize);\r\n  };\r\n\r\n  setSelectedColor = (color: string): void => {\r\n    const { onChange } = this.props;\r\n    onChange('color', color);\r\n  };\r\n\r\n  render() {\r\n    const { fontSize, color, onMouseDown, text, ...rest } = this.props;\r\n    return (\r\n      <section onMouseDown={onMouseDown}>\r\n        <FormGroup label=\"Texto\">\r\n          <TextArea\r\n            fill\r\n            growVertically\r\n            name=\"Texto\"\r\n            value={text}\r\n            onChange={this.onMainTextChanged}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup label=\"TamaÃ±o\">\r\n          <ButtonGroup fill>\r\n            <Button\r\n              large\r\n              active={fontSize === 'small'}\r\n              onClick={() => this.setHeight('small')}\r\n            >\r\n              <Icon iconSize={10} icon=\"font\" />\r\n            </Button>\r\n            <Button\r\n              large\r\n              active={fontSize === 'medium'}\r\n              onClick={() => this.setHeight('medium')}\r\n            >\r\n              <Icon iconSize={16} icon=\"font\" />\r\n            </Button>\r\n            <Button\r\n              large\r\n              active={fontSize === 'large'}\r\n              onClick={() => this.setHeight('large')}\r\n            >\r\n              <Icon iconSize={24} icon=\"font\" />\r\n            </Button>\r\n          </ButtonGroup>\r\n        </FormGroup>\r\n        <FormGroup label=\"Color\">\r\n          <ButtonGroup fill>\r\n            {TextBlocksConfigPanel.colors.map(el => (\r\n              <ColorSelector\r\n                key={el}\r\n                color={el}\r\n                isActive={el === color}\r\n                onColorClicked={this.setSelectedColor}\r\n              />\r\n            ))}\r\n          </ButtonGroup>\r\n        </FormGroup>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}