{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lucas\\\\Documents\\\\quiltros\\\\pages\\\\index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport { Component, createRef } from 'react';\nimport Canvas from '../components/canvas';\nimport LeftSidebar from '../components/LeftSideBar';\nimport Nav from '../components/Nav';\nimport { containerStyle, pageStyle } from './styles';\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      canvasImage: null,\n      canvasTexts: {\n        selectedTextBlock: '',\n        textBlocks: {}\n      },\n      formValues: {\n        chip: false,\n        'edad-mascota': '',\n        'email-contacto': '',\n        esterilizado: false,\n        'informacion-extra-mascota': '',\n        'nombre-contacto': '',\n        'nombre-mascota': '',\n        'tamaño-mascota': '',\n        'telefono-contacto': '',\n        vacunas: false,\n        'whatsapp-contacto': '',\n        'caso-mascota': '',\n        'ciudad-contacto': '',\n        'sexo-mascota': ''\n      },\n      canvasHeight: 750,\n      canvasWidth: 500\n    });\n\n    _defineProperty(this, \"stageRef\", createRef());\n\n    _defineProperty(this, \"setSelectedTextBlock\", selectedTextBlock => {\n      const {\n        canvasTexts\n      } = this.state;\n      this.setState({\n        canvasTexts: _objectSpread({}, canvasTexts, {\n          selectedTextBlock\n        })\n      });\n    });\n\n    _defineProperty(this, \"setCanvasImage\", image => {\n      this.setState({\n        canvasImage: image\n      });\n    });\n\n    _defineProperty(this, \"onTextChanged\", (key, value, id) => {\n      const {\n        canvasTexts\n      } = this.state;\n      const {\n        textBlocks\n      } = canvasTexts;\n      this.setState({\n        canvasTexts: _objectSpread({}, canvasTexts, {\n          textBlocks: _objectSpread({}, textBlocks, {\n            [id]: _objectSpread({}, textBlocks[id], {\n              [key]: value\n            })\n          })\n        })\n      });\n    });\n\n    _defineProperty(this, \"onTextBlockChanged\", (id, text) => {\n      const {\n        canvasTexts\n      } = this.state;\n      const {\n        textBlocks\n      } = canvasTexts;\n      this.setState({\n        canvasTexts: _objectSpread({}, canvasTexts, {\n          textBlocks: _objectSpread({}, textBlocks, {\n            [id]: _objectSpread({}, textBlocks[id], {\n              text\n            })\n          })\n        })\n      }, () => {\n        console.log(this.state);\n      });\n    });\n\n    _defineProperty(this, \"setAdoptionFormField\", (key, value) => {\n      const {\n        canvasTexts,\n        canvasHeight,\n        canvasWidth\n      } = this.state;\n      const {\n        textBlocks\n      } = canvasTexts;\n      let newTextBlock = {\n        id: key,\n        color: 'black',\n        text: value,\n        fontSize: 'medium',\n        position: {\n          x: 0,\n          y: 0\n        }\n      };\n\n      switch (key) {\n        case 'nombre-mascota':\n          newTextBlock.align = 'center';\n          newTextBlock.width = canvasWidth;\n          newTextBlock.position.y = canvasHeight * 0.1;\n          newTextBlock.style = 'bold';\n          newTextBlock.fontSize = 'large';\n          break;\n\n        case 'caso-mascota':\n          newTextBlock.align = 'center';\n          newTextBlock.width = canvasWidth;\n          newTextBlock.position.y = canvasHeight * 0.2;\n          newTextBlock.text = value === '1' ? \"En adopción\" : 'Perdido';\n      }\n\n      this.setState({\n        formValues: _objectSpread({}, this.state.formValues, {\n          [key]: value\n        }),\n        canvasTexts: _objectSpread({}, canvasTexts, {\n          textBlocks: _objectSpread({}, textBlocks, {\n            [key]: newTextBlock\n          })\n        })\n      });\n    });\n\n    _defineProperty(this, \"addTextBlockWithData\", newTextblock => {\n      const {\n        canvasTexts\n      } = this.state;\n      const {\n        textBlocks\n      } = canvasTexts;\n      const id = newTextblock.id;\n      this.setState({\n        canvasTexts: _objectSpread({}, canvasTexts, {\n          textBlocks: _objectSpread({}, textBlocks, {\n            [id]: newTextblock\n          })\n        })\n      });\n    });\n  }\n\n  componentDidMount() {//this.addTextBlock();\n  }\n\n  render() {\n    const {\n      canvasImage,\n      canvasTexts,\n      formValues,\n      canvasHeight,\n      canvasWidth\n    } = this.state;\n    const {\n      selectedTextBlock,\n      textBlocks\n    } = canvasTexts;\n    return jsx(\"div\", {\n      css: pageStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, jsx(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }), jsx(\"section\", {\n      \"data-name\": \"bodycontainer\",\n      css: containerStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, jsx(LeftSidebar, {\n      canvasRef: this.stageRef,\n      formValues: formValues,\n      onTextBlockInteracted: this.setSelectedTextBlock,\n      selectedTextBlock: selectedTextBlock,\n      textBlocks: textBlocks,\n      onInputChanged: this.setAdoptionFormField,\n      onTextChanged: this.onTextChanged,\n      addTextBlockWithData: this.addTextBlockWithData,\n      onImageUploaded: this.setCanvasImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }), jsx(Canvas, {\n      canvasRef: this.stageRef,\n      canvasTexts: canvasTexts,\n      currentCanvasText: textBlocks[selectedTextBlock],\n      image: canvasImage,\n      onRef: this.stageRef,\n      onTextChanged: this.onTextBlockChanged,\n      onTextBlockSelected: this.setSelectedTextBlock,\n      canvasHeight: canvasHeight,\n      canvasWidth: canvasWidth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/Lucas/Documents/quiltros/pages/index.tsx"],"names":["jsx","Component","createRef","Canvas","LeftSidebar","Nav","containerStyle","pageStyle","Home","canvasImage","canvasTexts","selectedTextBlock","textBlocks","formValues","chip","esterilizado","vacunas","canvasHeight","canvasWidth","state","setState","image","key","value","id","text","console","log","newTextBlock","color","fontSize","position","x","y","align","width","style","newTextblock","componentDidMount","render","stageRef","setSelectedTextBlock","setAdoptionFormField","onTextChanged","addTextBlockWithData","setCanvasImage","onTextBlockChanged"],"mappings":"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","sourcesContent":["/** @jsx jsx */\r\nimport { jsx } from '@emotion/core';\r\nimport nanoid from 'nanoid';\r\nimport React, { Component, createRef } from 'react';\r\nimport Canvas from '../components/canvas';\r\nimport LeftSidebar from '../components/LeftSideBar';\r\nimport { ITextBlocksConfigPanelState } from '../components/LeftSideBar/TextBlocksCreator/panel';\r\nimport Nav from '../components/Nav';\r\nimport { containerStyle, pageStyle } from './styles'\r\n\r\ninterface IHomeState {\r\n  canvasImage: HTMLImageElement | null;\r\n  canvasTexts: ICanvasTexts;\r\n  formValues: IAdoptionForm;\r\n  canvasHeight: number;\r\n  canvasWidth: number;\r\n}\r\n\r\nexport interface ICanvasTexts {\r\n  selectedTextBlock: string; // TODO: Change this for a string union type\r\n  textBlocks: ITextBlocks\r\n}\r\n\r\ninterface ITextBlocks {\r\n    // TODO: Change keys on this objects also for a string uniion type.\r\n    // (Based on the types of TextBlocksCreator.buttonsKeys )\r\n    [s: string]: ITextBlockElement;\r\n}\r\n\r\nexport interface ITextBlockElement {\r\n  id: string;\r\n  text: string;\r\n  fontSize: 'small' | 'medium' | 'large';\r\n  color: 'black' | 'red' | 'green' | 'purple' | 'yellow' | 'white';\r\n  position: {\r\n    x: number;\r\n    y: number;\r\n  };\r\n  width?: number;\r\n  align?: 'left' | 'center' | 'right';\r\n  style?: 'normal' | 'bold' |  'italic';\r\n}\r\n\r\nexport interface IAdoptionForm {\r\n  'nombre-mascota': string;\r\n  'nombre-contacto': string;\r\n  'telefono-contacto': string;\r\n  'whatsapp-contacto': string;\r\n  'email-contacto': string;\r\n  'esterilizado': boolean;\r\n  'chip': boolean;\r\n  'vacunas': boolean;\r\n  'edad-mascota': string;\r\n  'informacion-extra-mascota'?: string;\r\n  'tamaño-mascota': string;\r\n  'caso-mascota': string;\r\n  'ciudad-contacto': string;\r\n  'sexo-mascota': string;\r\n}\r\n\r\nclass Home extends Component<any, IHomeState> {\r\n  state = {\r\n    canvasImage: null,\r\n    canvasTexts: {\r\n      selectedTextBlock : '',\r\n      textBlocks: {} as ITextBlocks\r\n    },\r\n    formValues: {\r\n      chip: false,\r\n      'edad-mascota': '',\r\n      'email-contacto': '',\r\n      esterilizado: false,\r\n      'informacion-extra-mascota': '',\r\n      'nombre-contacto': '',\r\n      'nombre-mascota': '',\r\n      'tamaño-mascota': '',\r\n      'telefono-contacto': '',\r\n      vacunas: false,\r\n      'whatsapp-contacto': '',\r\n      'caso-mascota': '',\r\n      'ciudad-contacto': '',\r\n      'sexo-mascota': ''\r\n    },\r\n    canvasHeight: 750,\r\n    canvasWidth: 500,\r\n  };\r\n\r\n  stageRef = createRef<any>();\r\n\r\n  componentDidMount() {\r\n    //this.addTextBlock();\r\n  }\r\n\r\n  setSelectedTextBlock = (selectedTextBlock: string) => {\r\n    const { canvasTexts } = this.state;\r\n    this.setState({\r\n      canvasTexts: {\r\n        ...canvasTexts,\r\n        selectedTextBlock\r\n      }\r\n    });\r\n  };\r\n\r\n  setCanvasImage = (image: HTMLImageElement) => {\r\n    this.setState({\r\n      canvasImage: image\r\n    });\r\n  };\r\n\r\n  onTextChanged = (key: string, value: string, id: string) => {\r\n    const { canvasTexts } = this.state;\r\n    const { textBlocks } = canvasTexts;\r\n    this.setState({\r\n      canvasTexts: {\r\n        ...canvasTexts,\r\n        textBlocks: {\r\n          ...textBlocks,\r\n          [id]: {\r\n            ...textBlocks[id],\r\n            [key]: value\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  onTextBlockChanged = (id: string, text: string) => {\r\n    const { canvasTexts } = this.state;\r\n    const { textBlocks } = canvasTexts;\r\n    this.setState(\r\n      {\r\n        canvasTexts: {\r\n          ...canvasTexts,\r\n          textBlocks: {\r\n            ...textBlocks,\r\n            [id]: {\r\n              ...textBlocks[id],\r\n              text\r\n            }\r\n          }\r\n        }\r\n      },\r\n      () => {\r\n        console.log(this.state);\r\n      }\r\n    );\r\n  };\r\n\r\n  setAdoptionFormField = (key: keyof IAdoptionForm, value: any) => {\r\n    const { canvasTexts, canvasHeight, canvasWidth } = this.state;\r\n    const { textBlocks } = canvasTexts;\r\n\r\n    let newTextBlock: ITextBlockElement = {\r\n      id: key,\r\n      color: 'black',\r\n      text: value,\r\n      fontSize: 'medium',\r\n      position: {x: 0, y: 0}\r\n    }\r\n    switch (key) {\r\n      case 'nombre-mascota' :\r\n        newTextBlock.align = 'center';\r\n        newTextBlock.width = canvasWidth;\r\n        newTextBlock.position.y = canvasHeight*0.1;\r\n        newTextBlock.style = 'bold';\r\n        newTextBlock.fontSize = 'large';\r\n        break;\r\n      case 'caso-mascota' :\r\n        newTextBlock.align = 'center';\r\n        newTextBlock.width = canvasWidth;\r\n        newTextBlock.position.y = canvasHeight*0.2;\r\n        newTextBlock.text = value === '1' ? \"En adopción\" : 'Perdido';\r\n\r\n    }\r\n    this.setState({\r\n      formValues: {\r\n        ...this.state.formValues,\r\n        [key]: value\r\n      },\r\n      canvasTexts: {\r\n        ...canvasTexts,\r\n        textBlocks: {\r\n          ...textBlocks,\r\n          [key]: newTextBlock\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  /*addTextBlock = () => {\r\n    const { canvasTexts } = this.state;\r\n    const { textBlocks } = canvasTexts;\r\n\r\n    const id = nanoid();\r\n    const newTextblock: ITextBlockElement = {\r\n      color: 'black',\r\n      fontSize: 'medium',\r\n      id,\r\n      text: ''\r\n    };\r\n\r\n    this.setState({\r\n      canvasTexts: {\r\n        ...canvasTexts,\r\n        textBlocks: {\r\n          ...textBlocks,\r\n          [id]: newTextblock\r\n        }\r\n      }\r\n    });\r\n  };*/\r\n\r\n  addTextBlockWithData = (newTextblock: ITextBlockElement) => {\r\n    const { canvasTexts } = this.state;\r\n    const { textBlocks } = canvasTexts;\r\n    const id = newTextblock.id;\r\n    this.setState({\r\n      canvasTexts: {\r\n        ...canvasTexts,\r\n        textBlocks: {\r\n          ...textBlocks,\r\n          [id]: newTextblock\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { canvasImage, canvasTexts, formValues, canvasHeight, canvasWidth } = this.state;\r\n    const { selectedTextBlock, textBlocks } = canvasTexts;\r\n\r\n    return (\r\n      <div css={pageStyle}>\r\n        <Nav />\r\n        <section data-name=\"bodycontainer\" css={containerStyle}>\r\n          <LeftSidebar\r\n            canvasRef={this.stageRef}\r\n            formValues={formValues}\r\n            onTextBlockInteracted={this.setSelectedTextBlock}\r\n            selectedTextBlock={selectedTextBlock}\r\n            textBlocks={textBlocks}\r\n            onInputChanged={this.setAdoptionFormField}\r\n            onTextChanged={this.onTextChanged}\r\n            addTextBlockWithData={this.addTextBlockWithData}\r\n            onImageUploaded={this.setCanvasImage}\r\n          />\r\n          <Canvas\r\n            canvasRef={this.stageRef}\r\n            canvasTexts={canvasTexts}\r\n            currentCanvasText={textBlocks[selectedTextBlock]}\r\n            image={canvasImage}\r\n            onRef={this.stageRef}\r\n            onTextChanged={this.onTextBlockChanged}\r\n            onTextBlockSelected={this.setSelectedTextBlock}\r\n            canvasHeight={canvasHeight}\r\n            canvasWidth={canvasWidth}\r\n          />\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n\r\n"]},"metadata":{},"sourceType":"module"}