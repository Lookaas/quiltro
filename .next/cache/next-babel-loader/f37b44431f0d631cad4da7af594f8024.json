{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lucas\\\\Documents\\\\quiltros\\\\components\\\\LeftSideBar\\\\TextBlocksCreator\\\\panel.tsx\";\nvar __jsx = React.createElement;\n\n/** @jsx jsx */\nimport { Button, ButtonGroup, FormGroup, Icon, TextArea } from '@blueprintjs/core';\nimport { jsx } from '@emotion/core';\nimport React from 'react';\nimport ColorSelector from '../ColorSelector';\n\nvar TextBlocksConfigPanel =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(TextBlocksConfigPanel, _React$Component);\n\n  function TextBlocksConfigPanel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TextBlocksConfigPanel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TextBlocksConfigPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"onMainTextChanged\", function (e) {\n      var onChange = _this.props.onChange;\n      onChange('text', e.currentTarget.value);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setHeight\", function (fontSize) {\n      var onChange = _this.props.onChange;\n      onChange('fontSize', fontSize);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setSelectedColor\", function (color) {\n      var onChange = _this.props.onChange;\n      onChange('color', color);\n    });\n\n    return _this;\n  }\n\n  _createClass(TextBlocksConfigPanel, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          fontSize = _this$props.fontSize,\n          color = _this$props.color,\n          onMouseDown = _this$props.onMouseDown,\n          text = _this$props.text,\n          rest = _objectWithoutProperties(_this$props, [\"fontSize\", \"color\", \"onMouseDown\", \"text\"]);\n\n      return jsx(\"section\", {\n        onMouseDown: onMouseDown,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, jsx(FormGroup, {\n        label: \"Texto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, jsx(TextArea, {\n        fill: true,\n        growVertically: true,\n        name: \"Texto\",\n        value: text,\n        onChange: this.onMainTextChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      })), jsx(FormGroup, {\n        label: \"Tama\\xF1o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, jsx(ButtonGroup, {\n        fill: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, jsx(Button, {\n        large: true,\n        active: fontSize === 'small',\n        onClick: function onClick() {\n          return _this2.setHeight('small');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, jsx(Icon, {\n        iconSize: 10,\n        icon: \"font\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      })), jsx(Button, {\n        large: true,\n        active: fontSize === 'medium',\n        onClick: function onClick() {\n          return _this2.setHeight('medium');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, jsx(Icon, {\n        iconSize: 16,\n        icon: \"font\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      })), jsx(Button, {\n        large: true,\n        active: fontSize === 'large',\n        onClick: function onClick() {\n          return _this2.setHeight('large');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, jsx(Icon, {\n        iconSize: 24,\n        icon: \"font\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      })))), jsx(FormGroup, {\n        label: \"Color\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, jsx(ButtonGroup, {\n        fill: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, TextBlocksConfigPanel.colors.map(function (el) {\n        return jsx(ColorSelector, {\n          key: el,\n          color: el,\n          isActive: el === color,\n          onColorClicked: _this2.setSelectedColor,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        });\n      }))));\n    }\n  }]);\n\n  return TextBlocksConfigPanel;\n}(React.Component);\n\n_defineProperty(TextBlocksConfigPanel, \"colors\", ['black', 'red', 'green', 'purple', 'yellow', 'white']);\n\nexport { TextBlocksConfigPanel as default };","map":{"version":3,"sources":["C:/Users/Lucas/Documents/quiltros/components/LeftSideBar/TextBlocksCreator/panel.tsx"],"names":["Button","ButtonGroup","FormGroup","Icon","TextArea","jsx","React","ColorSelector","TextBlocksConfigPanel","e","onChange","props","currentTarget","value","fontSize","color","onMouseDown","text","rest","onMainTextChanged","setHeight","colors","map","el","setSelectedColor","Component"],"mappings":"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","sourcesContent":["/** @jsx jsx */\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  FormGroup,\r\n  Icon,\r\n  TextArea\r\n} from '@blueprintjs/core';\r\nimport { jsx } from '@emotion/core';\r\nimport React, { FormEvent } from 'react';\r\nimport ColorSelector from '../ColorSelector';\r\n\r\nexport interface ITextBlocksConfigPanelProps\r\n  extends ITextBlocksConfigPanelState {\r\n  isSelected: boolean;\r\n  onChange: (key: string, value: string) => void;\r\n  onMouseDown: () => void;\r\n}\r\n\r\nexport interface ITextBlocksConfigPanelState {\r\n  id: string;\r\n  text: string;\r\n  fontSize: 'small' | 'medium' | 'large';\r\n  color: 'black' | 'red' | 'green' | 'purple' | 'yellow' | 'white';\r\n}\r\n\r\nexport default class TextBlocksConfigPanel extends React.Component<\r\n  ITextBlocksConfigPanelProps\r\n> {\r\n  static colors = ['black', 'red', 'green', 'purple', 'yellow', 'white'];\r\n\r\n  onMainTextChanged = (e: FormEvent<HTMLTextAreaElement>) => {\r\n    const { onChange } = this.props;\r\n    onChange('text', e.currentTarget.value);\r\n  };\r\n\r\n  setHeight = (fontSize: string) => {\r\n    const { onChange } = this.props;\r\n    onChange('fontSize', fontSize);\r\n  };\r\n\r\n  setSelectedColor = (color: string): void => {\r\n    const { onChange } = this.props;\r\n    onChange('color', color);\r\n  };\r\n\r\n  render() {\r\n    const { fontSize, color, onMouseDown, text, ...rest } = this.props;\r\n    return (\r\n      <section onMouseDown={onMouseDown}>\r\n        <FormGroup label=\"Texto\">\r\n          <TextArea\r\n            fill\r\n            growVertically\r\n            name=\"Texto\"\r\n            value={text}\r\n            onChange={this.onMainTextChanged}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup label=\"Tamaño\">\r\n          <ButtonGroup fill>\r\n            <Button\r\n              large\r\n              active={fontSize === 'small'}\r\n              onClick={() => this.setHeight('small')}\r\n            >\r\n              <Icon iconSize={10} icon=\"font\" />\r\n            </Button>\r\n            <Button\r\n              large\r\n              active={fontSize === 'medium'}\r\n              onClick={() => this.setHeight('medium')}\r\n            >\r\n              <Icon iconSize={16} icon=\"font\" />\r\n            </Button>\r\n            <Button\r\n              large\r\n              active={fontSize === 'large'}\r\n              onClick={() => this.setHeight('large')}\r\n            >\r\n              <Icon iconSize={24} icon=\"font\" />\r\n            </Button>\r\n          </ButtonGroup>\r\n        </FormGroup>\r\n        <FormGroup label=\"Color\">\r\n          <ButtonGroup fill>\r\n            {TextBlocksConfigPanel.colors.map(el => (\r\n              <ColorSelector\r\n                key={el}\r\n                color={el}\r\n                isActive={el === color}\r\n                onColorClicked={this.setSelectedColor}\r\n              />\r\n            ))}\r\n          </ButtonGroup>\r\n        </FormGroup>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}