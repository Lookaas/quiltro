{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lucas\\\\Documents\\\\quiltros\\\\components\\\\Nav\\\\index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/** @jsx jsx */\nimport { Alignment, Button, Navbar } from '@blueprintjs/core';\nimport { jsx } from '@emotion/core';\nimport { Component, createRef } from 'react';\nimport { fileUpload, navContainerStyle } from './styles';\n\nvar Nav =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Nav, _Component);\n\n  function Nav() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Nav);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Nav)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"inputFileRef\", createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"openFile\", function () {\n      _this.inputFileRef.current.click();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"loadImageOntoReader\", function (event) {\n      var img = new Image();\n      img.src = event.target.result;\n      img.addEventListener('load', function () {\n        _this.props.onImageUploaded(img);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFileUploaded\", function (e) {\n      var reader = new FileReader();\n      reader.onload = _this.loadImageOntoReader;\n      var file = e.currentTarget.files[0];\n\n      if (!file) {\n        console.error('!file', file, e);\n      }\n\n      reader.readAsDataURL(e.currentTarget.files[0]);\n    });\n\n    return _this;\n  }\n\n  _createClass(Nav, [{\n    key: \"render\",\n    value: function render() {\n      return jsx(Navbar, {\n        css: navContainerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, jsx(Navbar.Group, {\n        align: Alignment.LEFT,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, jsx(Navbar.Heading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, \"Quiltro\"), jsx(Navbar.Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      })), jsx(Navbar.Group, {\n        align: Alignment.RIGHT,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, jsx(Navbar.Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), jsx(Button, {\n        intent: \"primary\",\n        rightIcon: \"upload\",\n        text: \"Subir Imagen\",\n        onClick: this.openFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), jsx(\"input\", {\n        ref: this.inputFileRef,\n        onChange: this.onFileUploaded,\n        type: \"file\",\n        css: fileUpload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Nav;\n}(Component);\n\nexport default Nav;","map":{"version":3,"sources":["C:/Users/Lucas/Documents/quiltros/components/Nav/index.tsx"],"names":["Alignment","Button","Navbar","jsx","Component","createRef","fileUpload","navContainerStyle","Nav","inputFileRef","current","click","event","img","Image","src","target","result","addEventListener","props","onImageUploaded","e","reader","FileReader","onload","loadImageOntoReader","file","currentTarget","files","console","error","readAsDataURL","LEFT","RIGHT","openFile","onFileUploaded"],"mappings":";;;;;;;;;;;AAAA;AACA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,MAA5B,QAA0C,mBAA1C;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,SAAgBC,SAAhB,EAA2BC,SAA3B,QAAoE,OAApE;AACA,SAASC,UAAT,EAAqBC,iBAArB,QAA8C,UAA9C;;IAKMC,G;;;;;;;;;;;;;;;;;;mEACmBH,SAAS,E;;+DAErB,YAAM;AACf,YAAKI,YAAL,CAAkBC,OAAlB,CAA2BC,KAA3B;AACD,K;;0EAEqB,UAACC,KAAD,EAAsC;AAC1D,UAAMC,GAAG,GAAG,IAAIC,KAAJ,EAAZ;AACAD,MAAAA,GAAG,CAACE,GAAJ,GAAUH,KAAK,CAACI,MAAN,CAAcC,MAAxB;AACAJ,MAAAA,GAAG,CAACK,gBAAJ,CAAqB,MAArB,EAA6B,YAAM;AACjC,cAAKC,KAAL,CAAWC,eAAX,CAA2BP,GAA3B;AACD,OAFD;AAGD,K;;qEAEgB,UAACQ,CAAD,EAAoC;AACnD,UAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AACAD,MAAAA,MAAM,CAACE,MAAP,GAAgB,MAAKC,mBAArB;AACA,UAAMC,IAAW,GAAGL,CAAC,CAACM,aAAF,CAAgBC,KAAhB,CAAuB,CAAvB,CAApB;;AACA,UAAI,CAACF,IAAL,EAAW;AACTG,QAAAA,OAAO,CAACC,KAAR,CAAc,OAAd,EAAuBJ,IAAvB,EAA6BL,CAA7B;AACD;;AACDC,MAAAA,MAAM,CAACS,aAAP,CAAqBV,CAAC,CAACM,aAAF,CAAgBC,KAAhB,CAAuB,CAAvB,CAArB;AACD,K;;;;;;;6BAEQ;AACP,aACE,IAAC,MAAD;AAAQ,QAAA,GAAG,EAAErB,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,IAAC,MAAD,CAAQ,KAAR;AAAc,QAAA,KAAK,EAAEP,SAAS,CAACgC,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,IAAC,MAAD,CAAQ,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE,IAAC,MAAD,CAAQ,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF,EAKE,IAAC,MAAD,CAAQ,KAAR;AAAc,QAAA,KAAK,EAAEhC,SAAS,CAACiC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,IAAC,MAAD,CAAQ,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,IAAC,MAAD;AACE,QAAA,MAAM,EAAC,SADT;AAEE,QAAA,SAAS,EAAC,QAFZ;AAGE,QAAA,IAAI,EAAC,cAHP;AAIE,QAAA,OAAO,EAAE,KAAKC,QAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAQE;AACE,QAAA,GAAG,EAAE,KAAKzB,YADZ;AAEE,QAAA,QAAQ,EAAE,KAAK0B,cAFjB;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,GAAG,EAAE7B,UAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARF,CALF,CADF;AAuBD;;;;EAjDeF,S;;AAoDlB,eAAeI,GAAf","sourcesContent":["/** @jsx jsx */\r\nimport { Alignment, Button, Navbar } from '@blueprintjs/core';\r\nimport { jsx } from '@emotion/core';\r\nimport React, { Component, createRef, ChangeEvent, FormEvent } from 'react';\r\nimport { fileUpload, navContainerStyle } from './styles';\r\n\r\ninterface INavProps {\r\n  onImageUploaded: (prop1: HTMLImageElement) => void;\r\n}\r\nclass Nav extends Component<INavProps> {\r\n  private inputFileRef = createRef<HTMLInputElement>();\r\n\r\n  openFile = () => {\r\n    this.inputFileRef.current!.click();\r\n  };\r\n\r\n  loadImageOntoReader = (event: ProgressEvent<FileReader>) => {\r\n    const img = new Image();\r\n    img.src = event.target!.result as string;\r\n    img.addEventListener('load', () => {\r\n      this.props.onImageUploaded(img);\r\n    });\r\n  };\r\n\r\n  onFileUploaded = (e: FormEvent<HTMLInputElement>) => {\r\n    const reader = new FileReader();\r\n    reader.onload = this.loadImageOntoReader;\r\n    const file : File = e.currentTarget.files![0];\r\n    if (!file) {\r\n      console.error('!file', file, e);\r\n    }\r\n    reader.readAsDataURL(e.currentTarget.files![0]);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Navbar css={navContainerStyle}>\r\n        <Navbar.Group align={Alignment.LEFT}>\r\n          <Navbar.Heading>Quiltro</Navbar.Heading>\r\n          <Navbar.Divider />\r\n        </Navbar.Group>\r\n        <Navbar.Group align={Alignment.RIGHT}>\r\n          <Navbar.Divider />\r\n          <Button\r\n            intent=\"primary\"\r\n            rightIcon=\"upload\"\r\n            text=\"Subir Imagen\"\r\n            onClick={this.openFile}\r\n          />\r\n          <input\r\n            ref={this.inputFileRef}\r\n            onChange={this.onFileUploaded}\r\n            type=\"file\"\r\n            css={fileUpload}\r\n          />\r\n        </Navbar.Group>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav;\r\n"]},"metadata":{},"sourceType":"module"}