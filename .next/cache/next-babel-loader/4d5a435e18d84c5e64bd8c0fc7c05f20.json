{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lucas\\\\Documents\\\\quiltros\\\\components\\\\LeftSideBar\\\\TextBlocksCreator\\\\index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/** @jsx jsx */\nimport { Button, Card, Elevation, FormGroup, H4 } from '@blueprintjs/core';\nimport { jsx } from '@emotion/core';\nimport React from 'react';\nimport TextBlocksConfigPanel from './panel';\nimport { sidebarContainerStyle } from './style';\nexport default class TextBlocksCreator extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onTextBlockChanged\", textBlockId => (key, value) => {\n      const {\n        onTextChanged,\n        onTextBlockInteracted\n      } = this.props;\n      onTextBlockInteracted(key);\n      onTextChanged(key, value, textBlockId);\n    });\n  }\n\n  render() {\n    const {\n      selectedTextBlock,\n      onAddTextBlockClicked,\n      onTextBlockInteracted,\n      textBlocks\n    } = this.props;\n    return jsx(Card, {\n      elevation: Elevation.ONE,\n      css: sidebarContainerStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, jsx(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, jsx(H4, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"Agregar Texto \", jsx(Button, {\n      icon: \"plus\",\n      onClick: onAddTextBlockClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }))), Object.values(textBlocks).map(textBlock => jsx(TextBlocksConfigPanel, _extends({\n      key: textBlock.id\n    }, textBlock, {\n      onMouseDown: () => onTextBlockInteracted(textBlock.id),\n      onChange: this.onTextBlockChanged(textBlock.id),\n      isSelected: selectedTextBlock === textBlock.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }))));\n  }\n\n}\n\n_defineProperty(TextBlocksCreator, \"buttonsKeys\", ['alignment-top', 'align-center', 'alignment-bottom']);","map":{"version":3,"sources":["C:/Users/Lucas/Documents/quiltros/components/LeftSideBar/TextBlocksCreator/index.tsx"],"names":["Button","Card","Elevation","FormGroup","H4","jsx","React","TextBlocksConfigPanel","sidebarContainerStyle","TextBlocksCreator","Component","textBlockId","key","value","onTextChanged","onTextBlockInteracted","props","render","selectedTextBlock","onAddTextBlockClicked","textBlocks","ONE","Object","values","map","textBlock","id","onTextBlockChanged"],"mappings":";;;;;;;AAAA;AACA,SACEA,MADF,EAGEC,IAHF,EAIEC,SAJF,EAKEC,SALF,EAMEC,EANF,QAOO,mBAPP;AAQA,SAASC,GAAT,QAAoB,eAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,qBAAP,MAAmE,SAAnE;AACA,SAASC,qBAAT,QAAsC,SAAtC;AAcA,eAAe,MAAMC,iBAAN,SAAgCH,KAAK,CAACI,SAAtC,CAGb;AAAA;AAAA;;AAAA,gDAEsBC,WAAD,IAAyB,CAACC,GAAD,EAAaC,KAAb,KAA8B;AAC1E,YAAM;AAAEC,QAAAA,aAAF;AAAiBC,QAAAA;AAAjB,UAA2C,KAAKC,KAAtD;AACAD,MAAAA,qBAAqB,CAACH,GAAD,CAArB;AACAE,MAAAA,aAAa,CAACF,GAAD,EAAMC,KAAN,EAAaF,WAAb,CAAb;AACD,KAND;AAAA;;AAQAM,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,iBADI;AAEJC,MAAAA,qBAFI;AAGJJ,MAAAA,qBAHI;AAIJK,MAAAA;AAJI,QAKF,KAAKJ,KALT;AAMA,WACE,IAAC,IAAD;AAAM,MAAA,SAAS,EAAEd,SAAS,CAACmB,GAA3B;AAAgC,MAAA,GAAG,EAAEb,qBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,IAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,IAAC,EAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACgB,IAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,MAAb;AAAoB,MAAA,OAAO,EAAEW,qBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADhB,CADF,CADF,EAMGG,MAAM,CAACC,MAAP,CAAcH,UAAd,EAA0BI,GAA1B,CAA8BC,SAAS,IACtC,IAAC,qBAAD;AACE,MAAA,GAAG,EAAEA,SAAS,CAACC;AADjB,OAEMD,SAFN;AAGE,MAAA,WAAW,EAAE,MAAMV,qBAAqB,CAACU,SAAS,CAACC,EAAX,CAH1C;AAIE,MAAA,QAAQ,EAAE,KAAKC,kBAAL,CAAwBF,SAAS,CAACC,EAAlC,CAJZ;AAKE,MAAA,UAAU,EAAER,iBAAiB,KAAKO,SAAS,CAACC,EAL9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADD,CANH,CADF;AAkBD;;AAjCD;;gBAHmBjB,iB,iBAIE,CAAC,eAAD,EAAkB,cAAlB,EAAkC,kBAAlC,C","sourcesContent":["/** @jsx jsx */\r\nimport {\r\n  Button,\r\n  ButtonGroup,\r\n  Card,\r\n  Elevation,\r\n  FormGroup,\r\n  H4\r\n} from '@blueprintjs/core';\r\nimport { jsx } from '@emotion/core';\r\nimport React from 'react';\r\nimport { IAdoptionForm } from '../../../pages';\r\nimport TextBlocksConfigPanel, { ITextBlocksConfigPanelState } from './panel';\r\nimport { sidebarContainerStyle } from './style';\r\n\r\nexport interface ITextBlocksCreatorProps {\r\n  onTextChanged: (key: string, value: string, id: string) => void;\r\n  onChange: (key: keyof IAdoptionForm, value: any) => void;\r\n  onAddTextBlockClicked: () => void;\r\n  onTextBlockInteracted: (key: string) => void;\r\n  selectedTextBlock: string;\r\n  textBlocks: {\r\n    [id: string]: ITextBlocksConfigPanelState;\r\n  };\r\n  formValues: IAdoptionForm;\r\n}\r\n\r\nexport default class TextBlocksCreator extends React.Component<\r\n  ITextBlocksCreatorProps,\r\n  any\r\n> {\r\n  static buttonsKeys = ['alignment-top', 'align-center', 'alignment-bottom'];\r\n  onTextBlockChanged = (textBlockId: string) => (key:string, value:string) => {\r\n    const { onTextChanged, onTextBlockInteracted } = this.props;\r\n    onTextBlockInteracted(key);\r\n    onTextChanged(key, value, textBlockId);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      selectedTextBlock,\r\n      onAddTextBlockClicked,\r\n      onTextBlockInteracted,\r\n      textBlocks\r\n    } = this.props;\r\n    return (\r\n      <Card elevation={Elevation.ONE} css={sidebarContainerStyle}>\r\n        <FormGroup>\r\n          <H4>\r\n            Agregar Texto <Button icon=\"plus\" onClick={onAddTextBlockClicked} />\r\n          </H4>\r\n        </FormGroup>\r\n        {Object.values(textBlocks).map(textBlock => (\r\n          <TextBlocksConfigPanel\r\n            key={textBlock.id}\r\n            {...textBlock}\r\n            onMouseDown={() => onTextBlockInteracted(textBlock.id)}\r\n            onChange={this.onTextBlockChanged(textBlock.id)}\r\n            isSelected={selectedTextBlock === textBlock.id}\r\n          />\r\n        ))}\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}