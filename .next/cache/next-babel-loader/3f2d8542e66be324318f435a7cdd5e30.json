{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lucas\\\\Documents\\\\quiltros\\\\components\\\\canvas\\\\TextArea\\\\index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { textaAreaStyle } from './style';\n\nclass EditTextArea extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      height: 0\n    });\n\n    _defineProperty(this, \"onChange\", e => {\n      const {\n        onTextAreaChanged,\n        selectedtextblockid\n      } = this.props;\n      const {\n        currentTarget\n      } = e;\n      const {\n        height\n      } = this.state;\n      const {\n        value,\n        scrollHeight\n      } = currentTarget;\n      console.log(selectedtextblockid, value);\n      onTextAreaChanged(selectedtextblockid, value);\n\n      if (scrollHeight !== height) {\n        this.setState({\n          height: scrollHeight\n        });\n      }\n    });\n\n    _defineProperty(this, \"onKeyDown\", e => {\n      const {\n        onTextAreaClosed\n      } = this.props;\n      const {\n        keyCode,\n        shiftKey\n      } = e; // If key is 'enter' and shift key is pressed\n\n      if (keyCode === 13 && !shiftKey) {\n        // End editing\n        onTextAreaClosed();\n      } // If key is 'esc'\n\n\n      if (keyCode === 27) {\n        // End editing\n        onTextAreaClosed();\n      }\n    });\n  }\n\n  componentDidMount() {\n    this.setState({\n      height: this.props.style.height\n    });\n  }\n\n  render() {\n    if (!document) {\n      return;\n    }\n\n    const domNode = document.querySelector('#portal_container');\n\n    if (!domNode) {\n      return;\n    }\n\n    const {\n      height\n    } = this.state;\n\n    const _this$props = this.props,\n          {\n      style,\n      maxWidth,\n      maxHeight,\n      onTextAreaClosed,\n      onTextAreaChanged\n    } = _this$props,\n          restOfProps = _objectWithoutProperties(_this$props, [\"style\", \"maxWidth\", \"maxHeight\", \"onTextAreaClosed\", \"onTextAreaChanged\"]);\n\n    const {\n      height: _\n    } = style,\n          rest = _objectWithoutProperties(style, [\"height\"]);\n\n    return ReactDOM.createPortal(jsx(\"textarea\", _extends({\n      autoFocus: true,\n      css: textaAreaStyle,\n      onKeyDown: this.onKeyDown,\n      onChange: this.onChange,\n      style: _objectSpread({}, rest, {\n        height,\n        maxWeight: `${maxHeight}px`,\n        maxWidth: `${maxWidth}px`\n      })\n    }, restOfProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), domNode);\n  }\n\n}\n\nexport default EditTextArea;","map":{"version":3,"sources":["C:/Users/Lucas/Documents/quiltros/components/canvas/TextArea/index.tsx"],"names":["jsx","Component","ReactDOM","textaAreaStyle","EditTextArea","height","e","onTextAreaChanged","selectedtextblockid","props","currentTarget","state","value","scrollHeight","console","log","setState","onTextAreaClosed","keyCode","shiftKey","componentDidMount","style","render","document","domNode","querySelector","maxWidth","maxHeight","restOfProps","_","rest","createPortal","onKeyDown","onChange","maxWeight"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA,SAASA,GAAT,QAAoB,eAApB;AACA,SACEC,SADF,QAIO,OAJP;AAKA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,cAAT,QAA+B,SAA/B;;AAYA,MAAMC,YAAN,SAA2BH,SAA3B,CAAoD;AAAA;AAAA;;AAAA,mCAC1C;AACNI,MAAAA,MAAM,EAAE;AADF,KAD0C;;AAAA,sCAWtCC,CAAD,IAA8C;AACvD,YAAM;AAAEC,QAAAA,iBAAF;AAAqBC,QAAAA;AAArB,UAA6C,KAAKC,KAAxD;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAoBJ,CAA1B;AACA,YAAM;AAAED,QAAAA;AAAF,UAAa,KAAKM,KAAxB;AACA,YAAM;AAAEC,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAA0BH,aAAhC;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAYP,mBAAZ,EAAiCI,KAAjC;AACAL,MAAAA,iBAAiB,CAACC,mBAAD,EAAsBI,KAAtB,CAAjB;;AACA,UAAIC,YAAY,KAAKR,MAArB,EAA6B;AAC3B,aAAKW,QAAL,CAAc;AACZX,UAAAA,MAAM,EAAEQ;AADI,SAAd;AAGD;AACF,KAvBiD;;AAAA,uCAyBrCP,CAAD,IAAkD;AAC5D,YAAM;AAAEW,QAAAA;AAAF,UAAuB,KAAKR,KAAlC;AACA,YAAM;AAAES,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAAwBb,CAA9B,CAF4D,CAI5D;;AACA,UAAIY,OAAO,KAAK,EAAZ,IAAkB,CAACC,QAAvB,EAAiC;AAC/B;AACAF,QAAAA,gBAAgB;AACjB,OAR2D,CAU5D;;;AACA,UAAIC,OAAO,KAAK,EAAhB,EAAoB;AAClB;AACAD,QAAAA,gBAAgB;AACjB;AACF,KAxCiD;AAAA;;AAKlDG,EAAAA,iBAAiB,GAAG;AAClB,SAAKJ,QAAL,CAAc;AACZX,MAAAA,MAAM,EAAE,KAAKI,KAAL,CAAWY,KAAX,CAAiBhB;AADb,KAAd;AAGD;;AAiCDiB,EAAAA,MAAM,GAAG;AACP,QAAI,CAACC,QAAL,EAAe;AACb;AACD;;AACD,UAAMC,OAAO,GAAGD,QAAQ,CAACE,aAAT,CAAuB,mBAAvB,CAAhB;;AACA,QAAI,CAACD,OAAL,EAAc;AACZ;AACD;;AACD,UAAM;AAAEnB,MAAAA;AAAF,QAAa,KAAKM,KAAxB;;AACA,wBAOI,KAAKF,KAPT;AAAA,UAAM;AACJY,MAAAA,KADI;AAEJK,MAAAA,QAFI;AAGJC,MAAAA,SAHI;AAIJV,MAAAA,gBAJI;AAKJV,MAAAA;AALI,KAAN;AAAA,UAMKqB,WANL;;AAQA,UAAM;AAAEvB,MAAAA,MAAM,EAAEwB;AAAV,QAAyBR,KAA/B;AAAA,UAAsBS,IAAtB,4BAA+BT,KAA/B;;AACA,WAAOnB,QAAQ,CAAC6B,YAAT,CACL;AACE,MAAA,SAAS,MADX;AAEE,MAAA,GAAG,EAAE5B,cAFP;AAGE,MAAA,SAAS,EAAE,KAAK6B,SAHlB;AAIE,MAAA,QAAQ,EAAE,KAAKC,QAJjB;AAKE,MAAA,KAAK,oBACAH,IADA;AAEHzB,QAAAA,MAFG;AAGH6B,QAAAA,SAAS,EAAG,GAAEP,SAAU,IAHrB;AAIHD,QAAAA,QAAQ,EAAG,GAAEA,QAAS;AAJnB;AALP,OAWME,WAXN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADK,EAcLJ,OAdK,CAAP;AAgBD;;AA5EiD;;AA+EpD,eAAepB,YAAf","sourcesContent":["/** @jsx jsx */\r\nimport { jsx } from '@emotion/core';\r\nimport React, {\r\n  Component,\r\n  FormEvent,\r\n  KeyboardEvent\r\n} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { textaAreaStyle } from './style';\r\n\r\nexport interface IEditTextArea {\r\n  maxWidth: number;\r\n  maxHeight: number;\r\n  selectedtextblockid: string;\r\n  onTextAreaChanged: (attr1: string, attr2: string) => void;\r\n  onTextAreaClosed: () => void;\r\n  value: string;\r\n  style: any;\r\n}\r\n\r\nclass EditTextArea extends Component<IEditTextArea> {\r\n  state = {\r\n    height: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      height: this.props.style.height\r\n    });\r\n  }\r\n\r\n  onChange = (e: FormEvent<HTMLTextAreaElement>) : void => {\r\n    const { onTextAreaChanged, selectedtextblockid } = this.props;\r\n    const { currentTarget } = e;\r\n    const { height } = this.state;\r\n    const { value, scrollHeight } = currentTarget;\r\n    console.log(selectedtextblockid, value);\r\n    onTextAreaChanged(selectedtextblockid, value);\r\n    if (scrollHeight !== height) {\r\n      this.setState({\r\n        height: scrollHeight\r\n      });\r\n    }\r\n  };\r\n\r\n  onKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) : void => {\r\n    const { onTextAreaClosed } = this.props;\r\n    const { keyCode, shiftKey } = e;\r\n\r\n    // If key is 'enter' and shift key is pressed\r\n    if (keyCode === 13 && !shiftKey) {\r\n      // End editing\r\n      onTextAreaClosed();\r\n    }\r\n\r\n    // If key is 'esc'\r\n    if (keyCode === 27) {\r\n      // End editing\r\n      onTextAreaClosed();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (!document) {\r\n      return;\r\n    }\r\n    const domNode = document.querySelector('#portal_container');\r\n    if (!domNode) {\r\n      return;\r\n    }\r\n    const { height } = this.state;\r\n    const {\r\n      style,\r\n      maxWidth,\r\n      maxHeight,\r\n      onTextAreaClosed,\r\n      onTextAreaChanged,\r\n      ...restOfProps\r\n    } = this.props;\r\n    const { height: _, ...rest } = style;\r\n    return ReactDOM.createPortal(\r\n      <textarea\r\n        autoFocus\r\n        css={textaAreaStyle}\r\n        onKeyDown={this.onKeyDown}\r\n        onChange={this.onChange}\r\n        style={{\r\n          ...rest,\r\n          height,\r\n          maxWeight: `${maxHeight}px`,\r\n          maxWidth: `${maxWidth}px`\r\n        }}\r\n        {...restOfProps}\r\n      />,\r\n      domNode\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditTextArea;\r\n"]},"metadata":{},"sourceType":"module"}