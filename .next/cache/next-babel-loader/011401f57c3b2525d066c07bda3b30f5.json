{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lucas\\\\Documents\\\\quiltros\\\\components\\\\canvas\\\\index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/** @jsx jsx */\nimport { Card, Elevation } from '@blueprintjs/core';\nimport { jsx } from '@emotion/core';\nimport { Component, createRef } from 'react';\nimport { Layer, Stage } from 'react-konva';\nimport BackgroundImage from './BackgroundImage';\nimport EditTextArea from './TextArea';\nimport { canvasStyle } from './style';\nimport CanvasText from './Text';\nimport TransformerComponent from './Transformer';\nimport CharacteristicsLayer from './CharacteristicsLayer';\n\nvar Canvas =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Canvas, _Component);\n\n  function Canvas() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Canvas);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Canvas)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      backgroundImage: null,\n      editTextAreaProps: {},\n      editTextAreaValue: '',\n      onTextAreaClosed: function onTextAreaClosed() {\n        return null;\n      },\n      showEditTextArea: false,\n      targetToRestore: []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"transformerRef\", createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"resizeImageHeight\", function (img, newHeight, newWidth) {\n      var canvas = document.createElement('canvas');\n      canvas.height = newHeight;\n      canvas.width = newWidth;\n      var ctx = canvas.getContext('2d');\n\n      if (!ctx) {\n        return _Promise.resolve(img);\n      }\n\n      return new _Promise(function (resolve, reject) {\n        ctx.drawImage(img, 0, 0);\n        ctx.drawImage(img, 0, 0, newWidth, newHeight);\n        var dataurl = canvas.toDataURL('image/png');\n        var newImage = new Image();\n        newImage.src = dataurl;\n        newImage.addEventListener('load', function () {\n          resolve(newImage);\n        });\n        newImage.addEventListener('error', function () {\n          reject(img);\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getResizedImage\", function (image) {\n      var height = image.height,\n          width = image.width;\n      var _this$props = _this.props,\n          canvasHeight = _this$props.canvasHeight,\n          canvasWidth = _this$props.canvasWidth;\n      var imageHeight = height;\n      var imageWidth = width; // Resize to go over the canvas height\n\n      imageWidth = imageWidth * (canvasHeight / imageHeight);\n      imageHeight = canvasHeight; // Resize to go over the canvas width\n\n      if (canvasWidth > imageWidth) {\n        imageHeight = imageHeight * (canvasWidth / imageWidth);\n        imageWidth = canvasWidth;\n      }\n\n      return _this.resizeImageHeight(image, imageHeight, imageWidth);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTextClick\", function (e) {\n      e.cancelBubble = true;\n      var selectedTextBlock = e.target.name();\n\n      _this.props.onTextBlockSelected(selectedTextBlock);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleStageMouseDown\", function (e) {\n      var showEditTextArea = false;\n      var selectedTextBlock = '';\n      var currentTarget = e.currentTarget;\n      var targetToRestore = _this.state.targetToRestore;\n      var onTextBlockSelected = _this.props.onTextBlockSelected;\n      /*const clickedOnStage = target === currentTarget.getStage();\r\n      //const clickedOnTransformer =\r\n      //  target.getParent() && target.getParent().className === 'Transformer';\r\n      //const hasNoName = Boolean(target.name()); // If the thing we are clicking has no name\r\n      const isTextNode = typeof e.currentTarget.stat === 'function'; // TODO: maybe remove this?\r\n      if (isTextNode) {\r\n        selectedTextBlock = e.target.name;\r\n      }*/\n\n      if (targetToRestore) {\n        targetToRestore.forEach(function (el) {\n          var canvasRef = _this.props.canvasRef.current;\n          el.show();\n          canvasRef.draw();\n        });\n      }\n\n      _this.setState({\n        showEditTextArea: showEditTextArea\n      }, function () {\n        return onTextBlockSelected(selectedTextBlock);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showElements\", function (currentTarget) {\n      return function () {\n        _this.setState({\n          showEditTextArea: false\n        }, function () {\n          currentTarget.hide();\n          var transformerRef = _this.transformerRef.current;\n          var canvasRef = _this.props.canvasRef.current;\n          currentTarget.show();\n          transformerRef.show();\n          canvasRef.draw();\n        });\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"hideElements\", function (currentTarget) {\n      currentTarget.hide();\n      var transformerRef = _this.transformerRef.current;\n      var canvasRef = _this.props.canvasRef.current;\n      currentTarget.hide();\n      transformerRef.hide();\n      canvasRef.draw();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMouseDown\", function (evt) {\n      var onTextBlockSelected = _this.props.onTextBlockSelected;\n      evt.cancelBubble = true;\n      var currentTarget = evt.target;\n      var id = currentTarget.attrs.id;\n      onTextBlockSelected(id);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDoubleClick\", function (evt) {\n      var currentTarget = evt.currentTarget;\n      var transformerRef = _this.transformerRef.current;\n      var canvasRef = _this.props.canvasRef.current;\n\n      _this.hideElements(currentTarget); // We will create a textarea absolutely positioned over the canvas\n      // And we will render it on a portal\n      // first we need to find position for textarea\n      // At first lets find position of text node relative to the stage:\n\n\n      var _currentTarget$absolu = currentTarget.absolutePosition(),\n          x = _currentTarget$absolu.x,\n          y = _currentTarget$absolu.y;\n\n      var _canvasRef$container$ = canvasRef.container().getBoundingClientRect(),\n          left = _canvasRef$container$.left,\n          top = _canvasRef$container$.top; // so position of textarea will be the sum of positions above:\n\n\n      var areaPosition = {\n        x: left + x,\n        y: top + y\n      }; // Create textarea styles to match text on canvas as close as possible\n      // (Text rendering on canvas and on the textarea can be different\n      // and sometimes it is hard to make it 100% the same)\n\n      var targetToRestore = [currentTarget, transformerRef];\n      var showEditTextArea = true;\n      var editTextAreaValue = currentTarget.text();\n      var editTextAreaProps = {\n        color: currentTarget.fill() + '',\n        fontFamily: currentTarget.fontFamily() + '',\n        fontSize: currentTarget.fontSize() + 'px',\n        height: currentTarget.height() + 'px',\n        left: areaPosition.x + 'px',\n        lineHeight: currentTarget.lineHeight() + '',\n        padding: currentTarget.padding() + 'px',\n        textAlign: currentTarget.align() + '',\n        top: areaPosition.y + 'px',\n        transformOrigin: 'left top',\n        width: currentTarget.width() + 5 + 'px'\n      };\n\n      var onTextAreaClosed = _this.showElements(currentTarget);\n\n      _this.setState({\n        editTextAreaProps: editTextAreaProps,\n        editTextAreaValue: editTextAreaValue,\n        onTextAreaClosed: onTextAreaClosed,\n        showEditTextArea: showEditTextArea,\n        targetToRestore: targetToRestore\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMount\", function (ref) {\n      _this.transformerRef = ref;\n    });\n\n    return _this;\n  }\n\n  _createClass(Canvas, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var image, backgroundImage;\n      return _regeneratorRuntime.async(function componentDidUpdate$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              image = this.props.image;\n\n              if (!(image && image !== prevProps.image)) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(this.getResizedImage(image));\n\n            case 4:\n              backgroundImage = _context.sent;\n              this.setState({\n                backgroundImage: backgroundImage\n              });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          backgroundImage = _this$state.backgroundImage,\n          showEditTextArea = _this$state.showEditTextArea,\n          editTextAreaProps = _this$state.editTextAreaProps,\n          onTextAreaClosed = _this$state.onTextAreaClosed;\n      var _this$props2 = this.props,\n          canvasTexts = _this$props2.canvasTexts,\n          onRef = _this$props2.onRef,\n          onTextChanged = _this$props2.onTextChanged,\n          canvasHeight = _this$props2.canvasHeight,\n          canvasWidth = _this$props2.canvasWidth,\n          characteristics = _this$props2.characteristics;\n      var textBlocks = canvasTexts.textBlocks,\n          selectedTextBlock = canvasTexts.selectedTextBlock; //const test = '<svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"venus\" class=\"svg-inline--fa fa-venus fa-w-9\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 288 512\"><path fill=\"currentColor\" d=\"M288 176c0-79.5-64.5-144-144-144S0 96.5 0 176c0 68.5 47.9 125.9 112 140.4V368H76c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h36v36c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-36h36c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12h-36v-51.6c64.1-14.5 112-71.9 112-140.4zm-224 0c0-44.1 35.9-80 80-80s80 35.9 80 80-35.9 80-80 80-80-35.9-80-80z\"></path></svg>'\n\n      return jsx(Card, {\n        elevation: Elevation.ONE,\n        css: canvasStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, true && jsx(Stage, {\n        ref: onRef,\n        width: canvasWidth,\n        height: canvasHeight,\n        onClick: this.handleStageMouseDown,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, jsx(BackgroundImage, {\n        backgroundImage: backgroundImage,\n        canvasHeight: canvasHeight,\n        canvasWidth: canvasWidth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }), jsx(Layer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, _Object$values(textBlocks).map(function (textBlock) {\n        return jsx(CanvasText, _extends({\n          key: textBlock.id\n        }, textBlock, {\n          maxHeight: canvasHeight,\n          maxWidth: canvasWidth,\n          onClick: _this2.onTextClick,\n          onDoubleClick: _this2.onDoubleClick,\n          onMouseDown: _this2.onMouseDown,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 254\n          },\n          __self: this\n        }));\n      }), jsx(CharacteristicsLayer, {\n        canvasHeight: canvasHeight,\n        canvasWidth: canvasWidth,\n        characteristics: characteristics,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }), jsx(TransformerComponent, {\n        resizeEnabled: true,\n        rotateEnabled: true,\n        borderEnabled: true,\n        onMount: this.onMount,\n        selectedShapeName: selectedTextBlock,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }))), showEditTextArea && textBlocks[selectedTextBlock].text && jsx(EditTextArea, {\n        onTextAreaClosed: onTextAreaClosed,\n        onTextAreaChanged: onTextChanged,\n        selectedtextblockid: selectedTextBlock,\n        value: textBlocks[selectedTextBlock].text,\n        style: editTextAreaProps,\n        maxWidth: canvasWidth,\n        maxHeight: canvasHeight,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Canvas;\n}(Component);\n\nexport default Canvas;","map":{"version":3,"sources":["C:/Users/Lucas/Documents/quiltros/components/canvas/index.tsx"],"names":["Card","Elevation","jsx","Component","createRef","Layer","Stage","BackgroundImage","EditTextArea","canvasStyle","CanvasText","TransformerComponent","CharacteristicsLayer","Canvas","backgroundImage","editTextAreaProps","editTextAreaValue","onTextAreaClosed","showEditTextArea","targetToRestore","img","newHeight","newWidth","canvas","document","createElement","height","width","ctx","getContext","resolve","reject","drawImage","dataurl","toDataURL","newImage","Image","src","addEventListener","image","props","canvasHeight","canvasWidth","imageHeight","imageWidth","resizeImageHeight","e","cancelBubble","selectedTextBlock","target","name","onTextBlockSelected","currentTarget","state","forEach","el","canvasRef","current","show","draw","setState","hide","transformerRef","evt","id","attrs","hideElements","absolutePosition","x","y","container","getBoundingClientRect","left","top","areaPosition","text","color","fill","fontFamily","fontSize","lineHeight","padding","textAlign","align","transformOrigin","showElements","ref","prevProps","getResizedImage","canvasTexts","onRef","onTextChanged","characteristics","textBlocks","ONE","handleStageMouseDown","map","textBlock","onTextClick","onDoubleClick","onMouseDown","onMount"],"mappings":"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","sourcesContent":["/** @jsx jsx */\r\nimport { Card, Elevation } from '@blueprintjs/core';\r\nimport { jsx } from '@emotion/core';\r\nimport { KonvaEventObject } from 'konva/types/Node';\r\nimport Konva from 'konva'\r\nimport React, { Component, createRef, RefObject } from 'react';\r\nimport { Layer, Stage, Path, Group } from 'react-konva';\r\nimport { Image as ImageKonva } from 'react-konva';\r\n\r\nimport { ICanvasTexts, ITextBlockElement } from '../../pages';\r\nimport { ITextBlocksConfigPanelState } from '../LeftSideBar/TextBlocksCreator/panel';\r\nimport BackgroundImage from './BackgroundImage';\r\nimport EditTextArea from './TextArea';\r\nimport { canvasStyle, testStyle } from './style';\r\nimport CanvasText from './Text';\r\nimport TransformerComponent from './Transformer';\r\nimport CharacteristicsLayer, { ICharacteristicElement } from './CharacteristicsLayer'\r\n\r\ninterface IAppProps {\r\n  onRef: RefObject<any>;\r\n  canvasRef: RefObject<any>;\r\n  onTextBlockSelected: (arg1: string) => void;\r\n  image: HTMLImageElement | null;\r\n  canvasTexts: ICanvasTexts;\r\n  onTextChanged: (arg1: string, arg2: string) => void;\r\n  currentCanvasText: ITextBlockElement;\r\n  canvasHeight: number;\r\n  canvasWidth: number;\r\n  characteristics: {\r\n    [priority: string] : ICharacteristicElement\r\n  }\r\n}\r\n\r\ninterface IAppState {\r\n  showEditTextArea: boolean;\r\n  backgroundImage: HTMLImageElement | null;\r\n  editTextAreaProps: any;\r\n  onTextAreaClosed: () => void;\r\n  targetToRestore: any[];\r\n  editTextAreaValue: string;\r\n}\r\nclass Canvas extends Component<IAppProps, IAppState> {\r\n  state = {\r\n    backgroundImage: null,\r\n    editTextAreaProps: {},\r\n    editTextAreaValue: '',\r\n    onTextAreaClosed: () => null,\r\n    showEditTextArea: false,\r\n    targetToRestore: []\r\n  };\r\n\r\n  transformerRef = createRef<any>();\r\n\r\n  resizeImageHeight = (img: HTMLImageElement, newHeight: number, newWidth: number): Promise<HTMLImageElement> => {\r\n    const canvas = document.createElement('canvas');\r\n    canvas.height = newHeight;\r\n    canvas.width = newWidth;\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) {\r\n      return Promise.resolve(img);\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      ctx.drawImage(img, 0, 0);\r\n      ctx.drawImage(img, 0, 0, newWidth, newHeight);\r\n      const dataurl = canvas.toDataURL('image/png');\r\n\r\n      const newImage = new Image();\r\n      newImage.src = dataurl;\r\n      newImage.addEventListener('load', () => {\r\n        resolve(newImage);\r\n      });\r\n      newImage.addEventListener('error', () => {\r\n        reject(img);\r\n      });\r\n    });\r\n  };\r\n\r\n  getResizedImage = (image: HTMLImageElement) => {\r\n    const { height, width } = image;\r\n    const { canvasHeight, canvasWidth } = this.props;\r\n    let imageHeight = height;\r\n    let imageWidth = width;\r\n    // Resize to go over the canvas height\r\n    imageWidth = imageWidth * (canvasHeight / imageHeight);\r\n    imageHeight = canvasHeight;\r\n\r\n    // Resize to go over the canvas width\r\n    if (canvasWidth > imageWidth) {\r\n      imageHeight = imageHeight * (canvasWidth / imageWidth);\r\n      imageWidth = canvasWidth;\r\n    }\r\n    return this.resizeImageHeight(image, imageHeight, imageWidth);\r\n  };\r\n\r\n  async componentDidUpdate(prevProps: any) {\r\n    const { image } = this.props;\r\n    if (image && image !== prevProps.image) {\r\n      const backgroundImage = await this.getResizedImage(image);\r\n      this.setState({ backgroundImage });\r\n    }\r\n  }\r\n\r\n  onTextClick = (e:Konva.KonvaEventObject<MouseEvent>): void => {\r\n    e.cancelBubble = true;\r\n    const selectedTextBlock = e.target.name();\r\n    this.props.onTextBlockSelected(selectedTextBlock);\r\n  };\r\n\r\n  handleStageMouseDown = (e: Konva.KonvaEventObject<MouseEvent>) => {\r\n    const showEditTextArea = false;\r\n    let selectedTextBlock = '';\r\n    const { currentTarget } = e;\r\n    const { targetToRestore } = this.state;\r\n    const { onTextBlockSelected } = this.props;\r\n    /*const clickedOnStage = target === currentTarget.getStage();\r\n    //const clickedOnTransformer =\r\n    //  target.getParent() && target.getParent().className === 'Transformer';\r\n    //const hasNoName = Boolean(target.name()); // If the thing we are clicking has no name\r\n    const isTextNode = typeof e.currentTarget.stat === 'function'; // TODO: maybe remove this?\r\n    if (isTextNode) {\r\n      selectedTextBlock = e.target.name;\r\n    }*/\r\n\r\n    if (targetToRestore) {\r\n      targetToRestore.forEach((el: any) => {\r\n        const canvasRef = this.props.canvasRef.current!;\r\n        el.show();\r\n        canvasRef.draw();\r\n      });\r\n    }\r\n\r\n    this.setState(\r\n      {\r\n        showEditTextArea\r\n      },\r\n      () => onTextBlockSelected(selectedTextBlock)\r\n    );\r\n  };\r\n\r\n  showElements = (currentTarget: any) => () => {\r\n    this.setState(\r\n      {\r\n        showEditTextArea: false\r\n      },\r\n      () => {\r\n        currentTarget.hide();\r\n        const transformerRef = this.transformerRef.current!;\r\n        const canvasRef = this.props.canvasRef.current!;\r\n        currentTarget.show();\r\n        transformerRef.show();\r\n        canvasRef.draw();\r\n      }\r\n    );\r\n  };\r\n\r\n  hideElements = (currentTarget: any) => {\r\n    currentTarget.hide();\r\n    const transformerRef = this.transformerRef.current!;\r\n    const canvasRef = this.props.canvasRef.current!;\r\n    currentTarget.hide();\r\n    transformerRef.hide();\r\n    canvasRef.draw();\r\n  };\r\n\r\n  onMouseDown = (evt: KonvaEventObject<MouseEvent>): void => {\r\n    const { onTextBlockSelected } = this.props;\r\n    evt.cancelBubble = true;\r\n    const currentTarget: any = evt.target;\r\n    const { id } = currentTarget.attrs;\r\n    onTextBlockSelected(id);\r\n  };\r\n\r\n  onDoubleClick = (evt: KonvaEventObject<MouseEvent>): void => {\r\n    const currentTarget: any = evt.currentTarget;\r\n    const transformerRef = this.transformerRef.current!;\r\n    const canvasRef = this.props.canvasRef.current!;\r\n    this.hideElements(currentTarget);\r\n\r\n    // We will create a textarea absolutely positioned over the canvas\r\n    // And we will render it on a portal\r\n    // first we need to find position for textarea\r\n\r\n    // At first lets find position of text node relative to the stage:\r\n    const { x, y } = currentTarget.absolutePosition();\r\n    const { left, top } = canvasRef.container().getBoundingClientRect();\r\n\r\n    // so position of textarea will be the sum of positions above:\r\n    const areaPosition = {\r\n      x: left + x,\r\n      y: top + y\r\n    };\r\n\r\n    // Create textarea styles to match text on canvas as close as possible\r\n    // (Text rendering on canvas and on the textarea can be different\r\n    // and sometimes it is hard to make it 100% the same)\r\n    const targetToRestore = [currentTarget, transformerRef];\r\n    const showEditTextArea = true;\r\n    const editTextAreaValue = currentTarget.text();\r\n    const editTextAreaProps = {\r\n      color: currentTarget.fill() + '',\r\n      fontFamily: currentTarget.fontFamily() + '',\r\n      fontSize: currentTarget.fontSize() + 'px',\r\n      height: currentTarget.height() + 'px',\r\n      left: areaPosition.x + 'px',\r\n      lineHeight: currentTarget.lineHeight() + '',\r\n      padding: currentTarget.padding() + 'px',\r\n      textAlign: currentTarget.align() + '',\r\n      top: areaPosition.y + 'px',\r\n      transformOrigin: 'left top',\r\n      width: currentTarget.width() + 5 + 'px'\r\n    };\r\n\r\n    const onTextAreaClosed = this.showElements(currentTarget);\r\n\r\n    this.setState({\r\n      editTextAreaProps,\r\n      editTextAreaValue,\r\n      onTextAreaClosed,\r\n      showEditTextArea,\r\n      targetToRestore\r\n    });\r\n  };\r\n\r\n  onMount = (ref : RefObject<any>) => {\r\n    this.transformerRef = ref;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      backgroundImage,\r\n      showEditTextArea,\r\n      editTextAreaProps,\r\n      onTextAreaClosed\r\n    } = this.state;\r\n    const { canvasTexts, onRef, onTextChanged, canvasHeight, canvasWidth, characteristics } = this.props;\r\n    const { textBlocks, selectedTextBlock } = canvasTexts;\r\n    //const test = '<svg aria-hidden=\"true\" focusable=\"false\" data-prefix=\"fas\" data-icon=\"venus\" class=\"svg-inline--fa fa-venus fa-w-9\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 288 512\"><path fill=\"currentColor\" d=\"M288 176c0-79.5-64.5-144-144-144S0 96.5 0 176c0 68.5 47.9 125.9 112 140.4V368H76c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h36v36c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-36h36c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12h-36v-51.6c64.1-14.5 112-71.9 112-140.4zm-224 0c0-44.1 35.9-80 80-80s80 35.9 80 80-35.9 80-80 80-80-35.9-80-80z\"></path></svg>'\r\n    return (\r\n      <Card elevation={Elevation.ONE} css={canvasStyle}>\r\n        {process.browser && (\r\n          <Stage\r\n            ref={onRef}\r\n            width={canvasWidth}\r\n            height={canvasHeight}\r\n            onClick={this.handleStageMouseDown}\r\n          >\r\n            <BackgroundImage\r\n              backgroundImage={backgroundImage}\r\n              canvasHeight={canvasHeight}\r\n              canvasWidth={canvasWidth}\r\n            />\r\n            <Layer >\r\n              {Object.values(textBlocks).map(textBlock => (\r\n                <CanvasText\r\n                  key={textBlock.id}\r\n                  {...textBlock}\r\n                  maxHeight={canvasHeight}\r\n                  maxWidth={canvasWidth}\r\n                  onClick={this.onTextClick}\r\n                  onDoubleClick={this.onDoubleClick}\r\n                  onMouseDown={this.onMouseDown}\r\n                />\r\n              ))}\r\n\r\n              <CharacteristicsLayer canvasHeight={canvasHeight} canvasWidth={canvasWidth} characteristics={characteristics} />\r\n\r\n              <TransformerComponent\r\n                resizeEnabled\r\n                rotateEnabled={true}\r\n                borderEnabled\r\n                onMount={this.onMount}\r\n                selectedShapeName={selectedTextBlock}\r\n              />\r\n            </Layer>\r\n          </Stage>\r\n        )}\r\n        {showEditTextArea && textBlocks[selectedTextBlock].text && (\r\n          <EditTextArea\r\n            onTextAreaClosed={onTextAreaClosed}\r\n            onTextAreaChanged={onTextChanged}\r\n            selectedtextblockid={selectedTextBlock}\r\n            value={textBlocks[selectedTextBlock].text}\r\n            style={editTextAreaProps}\r\n            maxWidth={canvasWidth}\r\n            maxHeight={canvasHeight}\r\n          />\r\n        )}\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Canvas;\r\n"]},"metadata":{},"sourceType":"module"}