{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lucas\\\\Documents\\\\quiltros\\\\components\\\\canvas\\\\Text\\\\index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport React, { createRef } from 'react';\nimport { Text, Label, Tag } from 'react-konva';\n\nclass CanvasText extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      fontSize: 10\n    });\n\n    _defineProperty(this, \"transformerRef\", createRef());\n\n    _defineProperty(this, \"getNewPosition\", pos => {\n      const {\n        maxWidth,\n        maxHeight\n      } = this.props;\n      const ref = this.transformerRef.current;\n      const topBorder = pos.y;\n      const bottomBorder = pos.y + ref.height();\n      const leftBorder = pos.x;\n      const rightBorder = pos.x + ref.width();\n      let x = pos.x;\n      let y = pos.y;\n\n      if (topBorder < 0) {\n        y = 0;\n      } else if (bottomBorder > maxHeight) {\n        y = maxHeight - ref.height();\n      }\n\n      if (leftBorder < 0) {\n        x = 0;\n      } else if (rightBorder > maxWidth) {\n        x = maxWidth - ref.width();\n      }\n\n      return {\n        x,\n        y\n      };\n    });\n\n    _defineProperty(this, \"onTransform\", () => {\n      const ref = this.transformerRef.current;\n      ref.setAttrs({\n        scaleX: 1,\n        width: ref.width() * ref.scaleX()\n      });\n    });\n\n    _defineProperty(this, \"onDrag\", pos => {\n      return this.getNewPosition(pos);\n    });\n  }\n\n  static getDerivedStateFromProps(props) {\n    let stateFontSize = 10;\n    const {\n      fontSize\n    } = props;\n\n    if (fontSize === 'small') {\n      stateFontSize = 14;\n    }\n\n    if (fontSize === 'medium') {\n      stateFontSize = 21;\n    }\n\n    if (fontSize === 'large') {\n      stateFontSize = 35;\n    }\n\n    console.log();\n    return {\n      fontSize: stateFontSize\n    };\n  }\n\n  render() {\n    const {\n      id,\n      text,\n      color,\n      onDoubleClick,\n      onClick,\n      onMouseDown,\n      position,\n      align,\n      width,\n      style\n    } = this.props;\n    const {\n      fontSize\n    } = this.state;\n    return jsx(Label, {\n      x: position.x,\n      y: position.y,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, jsx(Tag, {\n      fill: \"#fff\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), jsx(Text, {\n      padding: 10,\n      fontSize: fontSize,\n      ref: this.transformerRef,\n      name: id,\n      id: id,\n      fill: color,\n      text: text,\n      transformsEnabled: \"position\",\n      draggable: true,\n      dragBoundFunc: this.onDrag,\n      onTransform: this.onTransform,\n      onClick: onClick,\n      onDblClick: onDoubleClick,\n      onMouseDown: onMouseDown,\n      align: align,\n      width: width,\n      fontStyle: style,\n      scale: {\n        x: 2,\n        y: 2\n      } // _useStrictMode\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default CanvasText;","map":{"version":3,"sources":["C:/Users/Lucas/Documents/quiltros/components/canvas/Text/index.tsx"],"names":["jsx","React","createRef","Text","Label","Tag","CanvasText","Component","fontSize","pos","maxWidth","maxHeight","props","ref","transformerRef","current","topBorder","y","bottomBorder","height","leftBorder","x","rightBorder","width","setAttrs","scaleX","getNewPosition","getDerivedStateFromProps","stateFontSize","console","log","render","id","text","color","onDoubleClick","onClick","onMouseDown","position","align","style","state","onDrag","onTransform"],"mappings":"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","sourcesContent":["/** @jsx jsx */\r\nimport { jsx } from '@emotion/core';\r\nimport { KonvaEventObject } from 'konva/types/Node';\r\nimport React, { createRef } from 'react';\r\nimport { Text, Label, Tag } from 'react-konva';\r\nimport { ITextBlocksConfigPanelState } from '../../LeftSideBar/TextBlocksCreator/panel';\r\nimport { ITextBlockElement } from '../../../pages'\r\n\r\ninterface ICanvasText extends ITextBlockElement {\r\n  maxWidth: number;\r\n  maxHeight: number;\r\n  // width: number;\r\n  // height: number;\r\n  onDoubleClick: (evt: KonvaEventObject<MouseEvent>) => void;\r\n  onClick: (evt: KonvaEventObject<MouseEvent>) => void;\r\n  onMouseDown: (evt: KonvaEventObject<MouseEvent>) => void;\r\n  id: string;\r\n}\r\n\r\nclass CanvasText extends React.Component<ICanvasText, any> {\r\n  static getDerivedStateFromProps(props: any) {\r\n    let stateFontSize = 10;\r\n    const { fontSize } = props;\r\n    if (fontSize === 'small') {\r\n      stateFontSize = 14;\r\n    }\r\n    if (fontSize === 'medium') {\r\n      stateFontSize = 21;\r\n    }\r\n    if (fontSize === 'large') {\r\n      stateFontSize = 35;\r\n    }\r\n    console.log();\r\n    return {\r\n      fontSize: stateFontSize\r\n    };\r\n  }\r\n\r\n  state = {\r\n    fontSize: 10\r\n  };\r\n\r\n  transformerRef = createRef<any>();\r\n\r\n  getNewPosition = (pos: {x: number, y: number}) => {\r\n    const { maxWidth, maxHeight } = this.props;\r\n    const ref = this.transformerRef.current!;\r\n\r\n    const topBorder = pos.y;\r\n    const bottomBorder = pos.y + ref.height();\r\n    const leftBorder = pos.x;\r\n    const rightBorder = pos.x + ref.width();\r\n\r\n    let x = pos.x;\r\n    let y = pos.y;\r\n    if (topBorder < 0) {\r\n      y = 0;\r\n    } else if (bottomBorder > maxHeight) {\r\n      y = maxHeight - ref.height();\r\n    }\r\n\r\n    if (leftBorder < 0) {\r\n      x = 0;\r\n    } else if (rightBorder > maxWidth) {\r\n      x = maxWidth - ref.width();\r\n    }\r\n    return {\r\n      x,\r\n      y\r\n    };\r\n  };\r\n\r\n  onTransform = () => {\r\n    const ref = this.transformerRef.current!;\r\n    ref.setAttrs({\r\n      scaleX: 1,\r\n      width: ref.width() * ref.scaleX()\r\n    });\r\n  };\r\n\r\n  onDrag = (pos: {x: number, y: number}) => {\r\n    return this.getNewPosition(pos);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      text,\r\n      color,\r\n      onDoubleClick,\r\n      onClick,\r\n      onMouseDown,\r\n      position,\r\n      align,\r\n      width,\r\n      style\r\n    } = this.props;\r\n    const { fontSize } = this.state;\r\n    return (\r\n      <Label\r\n        x={position.x}\r\n        y={position.y}>\r\n        <Tag fill='#fff' />\r\n        <Text\r\n        padding={10}\r\n        fontSize={fontSize}\r\n        ref={this.transformerRef}\r\n        name={id}\r\n        id={id}\r\n        fill={color}\r\n        text={text}\r\n        transformsEnabled=\"position\"\r\n        draggable\r\n        dragBoundFunc={this.onDrag}\r\n        onTransform={this.onTransform}\r\n        onClick={onClick}\r\n        onDblClick={onDoubleClick}\r\n        onMouseDown={onMouseDown}\r\n        align={align}\r\n        width={width}\r\n        fontStyle={style}\r\n        scale={{x: 2, y: 2}}\r\n        // _useStrictMode\r\n      />\r\n      </Label>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CanvasText;\r\n"]},"metadata":{},"sourceType":"module"}