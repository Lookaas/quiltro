{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lucas\\\\Documents\\\\quiltros\\\\components\\\\LeftSideBar\\\\index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport { Component } from 'react';\nimport ReactGA from 'react-ga';\nimport ContactInformation from './ContactInformation';\nimport PetInformation from './PetInformation';\nimport SubmitButton from './SubmitButton';\nimport TextBlocksCreator from './TextBlocksCreator';\nexport default class LeftSidebar extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isFormValid: false\n    });\n\n    _defineProperty(this, \"getDataByKey\", (form, key) => {\n      return form[key].toString();\n    });\n\n    _defineProperty(this, \"getFormData\", () => {\n      const formData = new FormData();\n      const {\n        formValues\n      } = this.props;\n\n      for (const key in formValues) {\n        if (formValues.hasOwnProperty(key)) {\n          const element = this.getDataByKey(formValues, key);\n          formData.append(key, element);\n        }\n      }\n\n      const imageBlob = this.onExportImageClicked();\n      formData.append('image', imageBlob);\n      return {\n        formData,\n        formJson: formValues\n      };\n    });\n\n    _defineProperty(this, \"dataURItoBlob\", dataURI => {\n      let byteString;\n      let mimestring;\n\n      if (dataURI.split(',')[0].indexOf('base64') !== -1) {\n        byteString = atob(dataURI.split(',')[1]);\n      } else {\n        byteString = decodeURI(dataURI.split(',')[1]);\n      }\n\n      mimestring = dataURI.split(',')[0].split(':')[1].split(';')[0];\n      const content = new Array();\n\n      for (let i = 0; i < byteString.length; i++) {\n        content[i] = byteString.charCodeAt(i);\n      }\n\n      return new Blob([new Uint8Array(content)], {\n        type: mimestring\n      });\n    });\n\n    _defineProperty(this, \"onExportImageClicked\", () => {\n      const imgB64 = this.props.canvasRef.current.toDataURL({\n        pixelRatio: 2\n      });\n      const blob = this.dataURItoBlob(imgB64);\n      return blob;\n    });\n\n    _defineProperty(this, \"onSubmit\", async e => {\n      e.preventDefault();\n      const {\n        formData,\n        formJson\n      } = this.getFormData();\n      const response = await fetch('/api/image', {\n        body: formData,\n        method: 'POST'\n      }).then(r => r.json());\n      ReactGA.event(_objectSpread({\n        action: 'adoption-created',\n        category: 'User',\n        value: 1\n      }, formJson));\n    });\n\n    _defineProperty(this, \"onFormChange\", e => {\n      const isFormValid = e.currentTarget.checkValidity();\n      this.setState({\n        isFormValid\n      });\n    });\n  }\n\n  render() {\n    const {\n      onTextChanged,\n      formValues,\n      onInputChanged,\n      onTextBlockInteracted,\n      selectedTextBlock,\n      addTextBlock,\n      textBlocks\n    } = this.props;\n    return jsx(\"form\", {\n      onSubmit: this.onSubmit,\n      onChange: this.onFormChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, jsx(PetInformation, {\n      onChange: onInputChanged,\n      formValues: formValues,\n      addText: onTextChanged,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), jsx(ContactInformation, {\n      onChange: onInputChanged,\n      formValues: formValues,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), jsx(TextBlocksCreator, {\n      onAddTextBlockClicked: addTextBlock,\n      onTextBlockInteracted: onTextBlockInteracted,\n      onTextChanged: onTextChanged,\n      onChange: onInputChanged,\n      selectedTextBlock: selectedTextBlock,\n      textBlocks: textBlocks,\n      formValues: formValues,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), jsx(SubmitButton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Lucas/Documents/quiltros/components/LeftSideBar/index.tsx"],"names":["jsx","Component","ReactGA","ContactInformation","PetInformation","SubmitButton","TextBlocksCreator","LeftSidebar","isFormValid","form","key","toString","formData","FormData","formValues","props","hasOwnProperty","element","getDataByKey","append","imageBlob","onExportImageClicked","formJson","dataURI","byteString","mimestring","split","indexOf","atob","decodeURI","content","Array","i","length","charCodeAt","Blob","Uint8Array","type","imgB64","canvasRef","current","toDataURL","pixelRatio","blob","dataURItoBlob","e","preventDefault","getFormData","response","fetch","body","method","then","r","json","event","action","category","value","currentTarget","checkValidity","setState","render","onTextChanged","onInputChanged","onTextBlockInteracted","selectedTextBlock","addTextBlock","textBlocks","onSubmit","onFormChange"],"mappings":"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","sourcesContent":["/** @jsx jsx */\r\nimport { jsx } from '@emotion/core';\r\nimport React, { Component, FormEvent, RefObject } from 'react';\r\nimport ReactGA from 'react-ga';\r\n\r\nimport { IAdoptionForm } from '../../pages';\r\nimport ContactInformation from './ContactInformation';\r\nimport PetInformation from './PetInformation';\r\nimport SubmitButton from './SubmitButton';\r\nimport TextBlocksCreator from './TextBlocksCreator';\r\nimport { ITextBlocksConfigPanelState } from './TextBlocksCreator/panel';\r\n\r\nexport interface ILeftSidebarProps {\r\n  canvasRef: RefObject<any>;\r\n  formValues: IAdoptionForm;\r\n  selectedTextBlock: string;\r\n  textBlocks: {\r\n    [id: string]: ITextBlocksConfigPanelState;\r\n  };\r\n  addTextBlock: () => void;\r\n  addTextBlockWithData: (id: string, value: string) => void;\r\n  onInputChanged: (key: keyof IAdoptionForm, value: any) => void;\r\n  onTextBlockInteracted: (key: string) => void;\r\n  onTextChanged: (key: string, value: string, id: string) => void;\r\n}\r\n\r\nexport interface ILeftSidebarState {\r\n  isFormValid: boolean;\r\n}\r\n\r\nexport default class LeftSidebar extends Component<\r\n  ILeftSidebarProps,\r\n  ILeftSidebarState\r\n> {\r\n  state = {\r\n    isFormValid: false\r\n  };\r\n\r\n  getDataByKey = (form: IAdoptionForm, key: keyof IAdoptionForm) => {\r\n    return form[key]!.toString();\r\n  }\r\n\r\n  getFormData = (): { formData: FormData; formJson: object } => {\r\n    const formData = new FormData();\r\n    const { formValues } = this.props;\r\n    for (const key in formValues) {\r\n      if (formValues.hasOwnProperty(key)) {\r\n        const element: string = this.getDataByKey(formValues, key as keyof IAdoptionForm);\r\n        formData.append(key, element);\r\n      }\r\n    }\r\n    const imageBlob = this.onExportImageClicked();\r\n    formData.append('image', imageBlob);\r\n    return {\r\n      formData,\r\n      formJson: formValues\r\n    };\r\n  };\r\n\r\n  dataURItoBlob = (dataURI: String) => {\r\n    let byteString;\r\n    let mimestring;\r\n\r\n    if (dataURI.split(',')[0].indexOf('base64') !== -1) {\r\n      byteString = atob(dataURI.split(',')[1]);\r\n    } else {\r\n      byteString = decodeURI(dataURI.split(',')[1]);\r\n    }\r\n    mimestring = dataURI\r\n      .split(',')[0]\r\n      .split(':')[1]\r\n      .split(';')[0];\r\n    const content = new Array();\r\n    for (let i = 0; i < byteString.length; i++) {\r\n      content[i] = byteString.charCodeAt(i);\r\n    }\r\n    return new Blob([new Uint8Array(content)], { type: mimestring });\r\n  };\r\n\r\n  onExportImageClicked = () => {\r\n    const imgB64 = this.props.canvasRef.current!.toDataURL({ pixelRatio: 2 });\r\n    const blob = this.dataURItoBlob(imgB64);\r\n    return blob;\r\n  };\r\n\r\n  onSubmit = async (e: FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    const { formData, formJson } = this.getFormData();\r\n    const response = await fetch('/api/image', {\r\n      body: formData,\r\n      method: 'POST'\r\n    }).then(r => r.json());\r\n\r\n    ReactGA.event({\r\n      action: 'adoption-created',\r\n      category: 'User',\r\n      value: 1,\r\n      ...formJson\r\n    });\r\n  };\r\n\r\n  onFormChange = (e: FormEvent<HTMLFormElement>) => {\r\n    const isFormValid = e.currentTarget.checkValidity();\r\n    this.setState({\r\n      isFormValid\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      onTextChanged,\r\n      formValues,\r\n      onInputChanged,\r\n      onTextBlockInteracted,\r\n      selectedTextBlock,\r\n      addTextBlock,\r\n      textBlocks\r\n    } = this.props;\r\n    return (\r\n      <form onSubmit={this.onSubmit} onChange={this.onFormChange}>\r\n        <PetInformation onChange={onInputChanged} formValues={formValues} addText={onTextChanged} />\r\n        <ContactInformation onChange={onInputChanged} formValues={formValues} />\r\n        <TextBlocksCreator\r\n          onAddTextBlockClicked={addTextBlock}\r\n          onTextBlockInteracted={onTextBlockInteracted}\r\n          onTextChanged={onTextChanged}\r\n          onChange={onInputChanged}\r\n          selectedTextBlock={selectedTextBlock}\r\n          textBlocks={textBlocks}\r\n          formValues={formValues}\r\n        />\r\n        <SubmitButton />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}