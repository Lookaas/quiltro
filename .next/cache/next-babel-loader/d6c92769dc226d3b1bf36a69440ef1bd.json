{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lucas\\\\Documents\\\\quiltros\\\\components\\\\canvas\\\\Text\\\\index.tsx\";\nvar __jsx = React.createElement;\n\n/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport React, { createRef } from 'react';\nimport { Text } from 'react-konva';\n\nvar CanvasText =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CanvasText, _React$Component);\n\n  function CanvasText() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CanvasText);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CanvasText)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      fontSize: 10\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"transformerRef\", createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"getNewPosition\", function (pos) {\n      var _this$props = _this.props,\n          maxWidth = _this$props.maxWidth,\n          maxHeight = _this$props.maxHeight;\n      var ref = _this.transformerRef.current;\n      var topBorder = pos.y;\n      var bottomBorder = pos.y + ref.height();\n      var leftBorder = pos.x;\n      var rightBorder = pos.x + ref.width();\n      var x = pos.x;\n      var y = pos.y;\n\n      if (topBorder < 0) {\n        y = 0;\n      } else if (bottomBorder > maxHeight) {\n        y = maxHeight - ref.height();\n      }\n\n      if (leftBorder < 0) {\n        x = 0;\n      } else if (rightBorder > maxWidth) {\n        x = maxWidth - ref.width();\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTransform\", function () {\n      var ref = _this.transformerRef.current;\n      ref.setAttrs({\n        scaleX: 1,\n        width: ref.width() * ref.scaleX()\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDrag\", function (pos) {\n      return _this.getNewPosition(pos);\n    });\n\n    return _this;\n  }\n\n  _createClass(CanvasText, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          id = _this$props2.id,\n          text = _this$props2.text,\n          color = _this$props2.color,\n          onDoubleClick = _this$props2.onDoubleClick,\n          onClick = _this$props2.onClick,\n          onMouseDown = _this$props2.onMouseDown,\n          position = _this$props2.position;\n      var fontSize = this.state.fontSize;\n      return jsx(Text, {\n        padding: 10,\n        fontSize: fontSize,\n        ref: this.transformerRef,\n        name: id,\n        id: id,\n        fill: color,\n        text: text,\n        x: position.x,\n        y: position.y,\n        transformsEnabled: \"position\",\n        draggable: true,\n        dragBoundFunc: this.onDrag,\n        onTransform: this.onTransform,\n        onClick: onClick,\n        onDblClick: onDoubleClick,\n        onMouseDown: onMouseDown // _useStrictMode\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props) {\n      var stateFontSize = 10;\n      var fontSize = props.fontSize;\n\n      if (fontSize === 'small') {\n        stateFontSize = 14;\n      }\n\n      if (fontSize === 'medium') {\n        stateFontSize = 21;\n      }\n\n      if (fontSize === 'large') {\n        stateFontSize = 35;\n      }\n\n      console.log();\n      return {\n        fontSize: stateFontSize\n      };\n    }\n  }]);\n\n  return CanvasText;\n}(React.Component);\n\nexport default CanvasText;","map":{"version":3,"sources":["C:/Users/Lucas/Documents/quiltros/components/canvas/Text/index.tsx"],"names":["jsx","React","createRef","Text","CanvasText","fontSize","pos","props","maxWidth","maxHeight","ref","transformerRef","current","topBorder","y","bottomBorder","height","leftBorder","x","rightBorder","width","setAttrs","scaleX","getNewPosition","id","text","color","onDoubleClick","onClick","onMouseDown","position","state","onDrag","onTransform","stateFontSize","console","log","Component"],"mappings":"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","sourcesContent":["/** @jsx jsx */\r\nimport { jsx } from '@emotion/core';\r\nimport { KonvaEventObject } from 'konva/types/Node';\r\nimport React, { createRef } from 'react';\r\nimport { Text } from 'react-konva';\r\nimport { ITextBlocksConfigPanelState } from '../../LeftSideBar/TextBlocksCreator/panel';\r\n\r\ninterface ICanvasText extends ITextBlocksConfigPanelState {\r\n  maxWidth: number;\r\n  maxHeight: number;\r\n  position: {\r\n    x: number;\r\n    y: number;\r\n  };\r\n  // width: number;\r\n  // height: number;\r\n  onDoubleClick: (evt: KonvaEventObject<MouseEvent>) => void;\r\n  onClick: (evt: KonvaEventObject<MouseEvent>) => void;\r\n  onMouseDown: (evt: KonvaEventObject<MouseEvent>) => void;\r\n  id: string;\r\n}\r\n\r\nclass CanvasText extends React.Component<ICanvasText, any> {\r\n  static getDerivedStateFromProps(props: any) {\r\n    let stateFontSize = 10;\r\n    const { fontSize } = props;\r\n    if (fontSize === 'small') {\r\n      stateFontSize = 14;\r\n    }\r\n    if (fontSize === 'medium') {\r\n      stateFontSize = 21;\r\n    }\r\n    if (fontSize === 'large') {\r\n      stateFontSize = 35;\r\n    }\r\n    console.log();\r\n    return {\r\n      fontSize: stateFontSize\r\n    };\r\n  }\r\n\r\n  state = {\r\n    fontSize: 10\r\n  };\r\n\r\n  transformerRef = createRef<any>();\r\n\r\n  getNewPosition = (pos: {x: number, y: number}) => {\r\n    const { maxWidth, maxHeight } = this.props;\r\n    const ref = this.transformerRef.current!;\r\n\r\n    const topBorder = pos.y;\r\n    const bottomBorder = pos.y + ref.height();\r\n    const leftBorder = pos.x;\r\n    const rightBorder = pos.x + ref.width();\r\n\r\n    let x = pos.x;\r\n    let y = pos.y;\r\n    if (topBorder < 0) {\r\n      y = 0;\r\n    } else if (bottomBorder > maxHeight) {\r\n      y = maxHeight - ref.height();\r\n    }\r\n\r\n    if (leftBorder < 0) {\r\n      x = 0;\r\n    } else if (rightBorder > maxWidth) {\r\n      x = maxWidth - ref.width();\r\n    }\r\n    return {\r\n      x,\r\n      y\r\n    };\r\n  };\r\n\r\n  onTransform = () => {\r\n    const ref = this.transformerRef.current!;\r\n    ref.setAttrs({\r\n      scaleX: 1,\r\n      width: ref.width() * ref.scaleX()\r\n    });\r\n  };\r\n\r\n  onDrag = (pos: {x: number, y: number}) => {\r\n    return this.getNewPosition(pos);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      text,\r\n      color,\r\n      onDoubleClick,\r\n      onClick,\r\n      onMouseDown,\r\n      position\r\n    } = this.props;\r\n    const { fontSize } = this.state;\r\n    return (\r\n      <Text\r\n        padding={10}\r\n        fontSize={fontSize}\r\n        ref={this.transformerRef}\r\n        name={id}\r\n        id={id}\r\n        fill={color}\r\n        text={text}\r\n        x={position.x}\r\n        y={position.y}\r\n        transformsEnabled=\"position\"\r\n        draggable\r\n        dragBoundFunc={this.onDrag}\r\n        onTransform={this.onTransform}\r\n        onClick={onClick}\r\n        onDblClick={onDoubleClick}\r\n        onMouseDown={onMouseDown}\r\n        // _useStrictMode\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default CanvasText;\r\n"]},"metadata":{},"sourceType":"module"}