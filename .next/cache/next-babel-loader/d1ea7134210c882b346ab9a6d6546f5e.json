{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lucas\\\\Documents\\\\quiltros\\\\components\\\\LeftSideBar\\\\index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport { Component } from 'react';\nimport ContactInformation from './ContactInformation';\nimport PetInformation from './PetInformation';\nimport SubmitButton from './SubmitButton';\nimport { containerStyle } from './styles';\nexport default class LeftSidebar extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isFormValid: false\n    });\n\n    _defineProperty(this, \"getDataByKey\", (form, key) => {\n      return form[key].toString();\n    });\n\n    _defineProperty(this, \"getFormData\", () => {\n      const formData = new FormData();\n      const {\n        formValues\n      } = this.props;\n\n      for (const key in formValues) {\n        if (formValues.hasOwnProperty(key)) {\n          const element = this.getDataByKey(formValues, key);\n          formData.append(key, element);\n        }\n      }\n\n      const imageBlob = this.onExportImageClicked();\n      formData.append('image', imageBlob);\n      return {\n        formData,\n        formJson: formValues\n      };\n    });\n\n    _defineProperty(this, \"dataURItoBlob\", dataURI => {\n      let byteString;\n      let mimestring;\n\n      if (dataURI.split(',')[0].indexOf('base64') !== -1) {\n        byteString = atob(dataURI.split(',')[1]);\n      } else {\n        byteString = decodeURI(dataURI.split(',')[1]);\n      }\n\n      mimestring = dataURI.split(',')[0].split(':')[1].split(';')[0];\n      const content = new Array();\n\n      for (let i = 0; i < byteString.length; i++) {\n        content[i] = byteString.charCodeAt(i);\n      }\n\n      return new Blob([new Uint8Array(content)], {\n        type: mimestring\n      });\n    });\n\n    _defineProperty(this, \"onExportImageClicked\", () => {\n      const imgB64 = this.props.canvasRef.current.toDataURL({\n        pixelRatio: 2\n      });\n      const blob = this.dataURItoBlob(imgB64);\n      return blob;\n    });\n\n    _defineProperty(this, \"onSubmit\", async e => {\n      e.preventDefault();\n      const imgB64 = this.props.canvasRef.current.getStage().toDataURL({\n        pixelRatio: 3,\n        quality: 1\n      });\n      let link = document.createElement('a');\n      link.download = \"Test.png\";\n      link.href = imgB64;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      /*const { formData, formJson } = this.getFormData();\r\n      const response = await fetch('/api/image', {\r\n        body: formData,\r\n        method: 'POST'\r\n      }).then(r => r.json());\r\n        ReactGA.event({\r\n        action: 'adoption-created',\r\n        category: 'User',\r\n        value: 1,\r\n        ...formJson\r\n      });*/\n    });\n\n    _defineProperty(this, \"onFormChange\", e => {\n      const isFormValid = e.currentTarget.checkValidity();\n      this.setState({\n        isFormValid\n      });\n    });\n  }\n\n  render() {\n    const {\n      onTextChanged,\n      formValues,\n      onInputChanged,\n      onTextBlockInteracted,\n      selectedTextBlock,\n      textBlocks,\n      addTextBlockWithData,\n      onImageUploaded\n    } = this.props;\n    return jsx(\"form\", {\n      onSubmit: this.onSubmit,\n      onChange: this.onFormChange,\n      css: containerStyle,\n      method: \"post\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, jsx(PetInformation, {\n      onChange: onInputChanged,\n      formValues: formValues,\n      addText: addTextBlockWithData,\n      onImageUploaded: onImageUploaded,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, jsx(ContactInformation, {\n      onChange: onInputChanged,\n      formValues: formValues,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), jsx(SubmitButton, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Lucas/Documents/quiltros/components/LeftSideBar/index.tsx"],"names":["jsx","Component","ContactInformation","PetInformation","SubmitButton","containerStyle","LeftSidebar","isFormValid","form","key","toString","formData","FormData","formValues","props","hasOwnProperty","element","getDataByKey","append","imageBlob","onExportImageClicked","formJson","dataURI","byteString","mimestring","split","indexOf","atob","decodeURI","content","Array","i","length","charCodeAt","Blob","Uint8Array","type","imgB64","canvasRef","current","toDataURL","pixelRatio","blob","dataURItoBlob","e","preventDefault","getStage","quality","link","document","createElement","download","href","body","appendChild","click","removeChild","currentTarget","checkValidity","setState","render","onTextChanged","onInputChanged","onTextBlockInteracted","selectedTextBlock","textBlocks","addTextBlockWithData","onImageUploaded","onSubmit","onFormChange"],"mappings":"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","sourcesContent":["/** @jsx jsx */\r\nimport { jsx } from '@emotion/core';\r\nimport React, { Component, FormEvent, RefObject } from 'react';\r\nimport ReactGA from 'react-ga';\r\n\r\nimport { IAdoptionForm, ITextBlockElement } from '../../pages';\r\nimport ContactInformation from './ContactInformation';\r\nimport PetInformation from './PetInformation';\r\nimport SubmitButton from './SubmitButton';\r\nimport TextBlocksCreator from './TextBlocksCreator';\r\nimport { ITextBlocksConfigPanelState } from './TextBlocksCreator/panel';\r\nimport { containerStyle } from './styles'\r\nimport { Stage } from 'konva/types/Stage';\r\n\r\nexport interface ILeftSidebarProps {\r\n  canvasRef: RefObject<Stage>;\r\n  formValues: IAdoptionForm;\r\n  selectedTextBlock: string;\r\n  textBlocks: {\r\n    [id: string]: ITextBlockElement;\r\n  };\r\n  //addTextBlock: () => void;\r\n  addTextBlockWithData: (textBlock: ITextBlockElement) => void;\r\n  onInputChanged: (key: keyof IAdoptionForm, value: any) => void;\r\n  onTextBlockInteracted: (key: string) => void;\r\n  onTextChanged: (key: string, value: string, id: string) => void;\r\n  onImageUploaded: (prop1: HTMLImageElement) => void;\r\n}\r\n\r\nexport interface ILeftSidebarState {\r\n  isFormValid: boolean;\r\n}\r\n\r\nexport default class LeftSidebar extends Component<\r\n  ILeftSidebarProps,\r\n  ILeftSidebarState\r\n> {\r\n  state = {\r\n    isFormValid: false\r\n  };\r\n\r\n  getDataByKey = (form: IAdoptionForm, key: keyof IAdoptionForm) => {\r\n    return form[key]!.toString();\r\n  }\r\n\r\n  getFormData = (): { formData: FormData; formJson: object } => {\r\n    const formData = new FormData();\r\n    const { formValues } = this.props;\r\n    for (const key in formValues) {\r\n      if (formValues.hasOwnProperty(key)) {\r\n        const element: string = this.getDataByKey(formValues, key as keyof IAdoptionForm);\r\n        formData.append(key, element);\r\n      }\r\n    }\r\n    const imageBlob = this.onExportImageClicked();\r\n    formData.append('image', imageBlob);\r\n    return {\r\n      formData,\r\n      formJson: formValues\r\n    };\r\n  };\r\n\r\n  dataURItoBlob = (dataURI: String) => {\r\n    let byteString;\r\n    let mimestring;\r\n\r\n    if (dataURI.split(',')[0].indexOf('base64') !== -1) {\r\n      byteString = atob(dataURI.split(',')[1]);\r\n    } else {\r\n      byteString = decodeURI(dataURI.split(',')[1]);\r\n    }\r\n    mimestring = dataURI\r\n      .split(',')[0]\r\n      .split(':')[1]\r\n      .split(';')[0];\r\n    const content = new Array();\r\n    for (let i = 0; i < byteString.length; i++) {\r\n      content[i] = byteString.charCodeAt(i);\r\n    }\r\n    return new Blob([new Uint8Array(content)], { type: mimestring });\r\n  };\r\n\r\n  onExportImageClicked = () => {\r\n    const imgB64 = this.props.canvasRef.current!.toDataURL({ pixelRatio: 2 });\r\n    const blob = this.dataURItoBlob(imgB64);\r\n    return blob;\r\n  };\r\n\r\n  onSubmit = async (e: FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    const imgB64 = this.props.canvasRef.current!.getStage().toDataURL({ pixelRatio: 3, quality:1 });\r\n    let link = document.createElement('a');\r\n    link.download = \"Test.png\";\r\n    link.href = imgB64;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    /*const { formData, formJson } = this.getFormData();\r\n    const response = await fetch('/api/image', {\r\n      body: formData,\r\n      method: 'POST'\r\n    }).then(r => r.json());\r\n\r\n    ReactGA.event({\r\n      action: 'adoption-created',\r\n      category: 'User',\r\n      value: 1,\r\n      ...formJson\r\n    });*/\r\n  };\r\n\r\n  onFormChange = (e: FormEvent<HTMLFormElement>) => {\r\n    const isFormValid = e.currentTarget.checkValidity();\r\n    this.setState({\r\n      isFormValid\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      onTextChanged,\r\n      formValues,\r\n      onInputChanged,\r\n      onTextBlockInteracted,\r\n      selectedTextBlock,\r\n      textBlocks,\r\n      addTextBlockWithData,\r\n      onImageUploaded\r\n    } = this.props;\r\n    return (\r\n      <form onSubmit={this.onSubmit} onChange={this.onFormChange} css={containerStyle} method=\"post\">\r\n        <PetInformation onChange={onInputChanged} formValues={formValues} addText={addTextBlockWithData} onImageUploaded={onImageUploaded}/>\r\n        <div>\r\n          <ContactInformation onChange={onInputChanged} formValues={formValues} />\r\n          <SubmitButton />\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}