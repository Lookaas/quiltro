{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lucas\\\\Documents\\\\quiltros\\\\pages\\\\index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/** @jsx jsx */\nimport { jsx } from '@emotion/core';\nimport nanoid from 'nanoid';\nimport { Component, createRef } from 'react';\nimport Canvas from '../components/canvas';\nimport LeftSidebar from '../components/LeftSideBar';\nimport Nav from '../components/Nav';\nimport { containerStyle, pageStyle } from './styles';\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      canvasImage: null,\n      canvasTexts: {\n        selectedTextBlock: '',\n        textBlocks: {}\n      },\n      formValues: {\n        chip: false,\n        'edad-mascota': '',\n        'email-contacto': '',\n        esterilizado: false,\n        'informacion-extra-mascota': '',\n        'nombre-contacto': '',\n        'nombre-mascota': '',\n        'tamaÃ±o-mascota': false,\n        'telefono-contacto': '',\n        vacunas: false,\n        'whatsapp-contacto': '',\n        'caso': '',\n        'ciudad': ''\n      }\n    });\n\n    _defineProperty(this, \"stageRef\", createRef());\n\n    _defineProperty(this, \"setSelectedTextBlock\", selectedTextBlock => {\n      const {\n        canvasTexts\n      } = this.state;\n      this.setState({\n        canvasTexts: _objectSpread({}, canvasTexts, {\n          selectedTextBlock\n        })\n      });\n    });\n\n    _defineProperty(this, \"setCanvasImage\", image => {\n      this.setState({\n        canvasImage: image\n      });\n    });\n\n    _defineProperty(this, \"onTextChanged\", (key, value, id) => {\n      const {\n        canvasTexts\n      } = this.state;\n      const {\n        textBlocks\n      } = canvasTexts;\n      this.setState({\n        canvasTexts: _objectSpread({}, canvasTexts, {\n          textBlocks: _objectSpread({}, textBlocks, {\n            [id]: _objectSpread({}, textBlocks[id], {\n              [key]: value\n            })\n          })\n        })\n      });\n    });\n\n    _defineProperty(this, \"onTextBlockChanged\", (id, text) => {\n      const {\n        canvasTexts\n      } = this.state;\n      const {\n        textBlocks\n      } = canvasTexts;\n      this.setState({\n        canvasTexts: _objectSpread({}, canvasTexts, {\n          textBlocks: _objectSpread({}, textBlocks, {\n            [id]: _objectSpread({}, textBlocks[id], {\n              text\n            })\n          })\n        })\n      }, () => {\n        console.log(this.state);\n      });\n    });\n\n    _defineProperty(this, \"setAdoptionFormField\", (key, value) => {\n      this.setState({\n        formValues: _objectSpread({}, this.state.formValues, {\n          [key]: value\n        })\n      });\n    });\n\n    _defineProperty(this, \"addTextBlock\", () => {\n      const {\n        canvasTexts\n      } = this.state;\n      const {\n        textBlocks\n      } = canvasTexts;\n      const id = nanoid();\n      const newTextblock = {\n        color: 'black',\n        fontSize: 'medium',\n        id,\n        text: ''\n      };\n      this.setState({\n        canvasTexts: _objectSpread({}, canvasTexts, {\n          textBlocks: _objectSpread({}, textBlocks, {\n            [id]: newTextblock\n          })\n        })\n      });\n    });\n\n    _defineProperty(this, \"addTextBlockWithData\", (id, text) => {\n      const {\n        canvasTexts\n      } = this.state;\n      const {\n        textBlocks\n      } = canvasTexts;\n      const newTextblock = {\n        color: 'black',\n        fontSize: 'medium',\n        id,\n        text\n      };\n      this.setState({\n        canvasTexts: _objectSpread({}, canvasTexts, {\n          textBlocks: _objectSpread({}, textBlocks, {\n            [id]: newTextblock\n          })\n        })\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.addTextBlock();\n  }\n\n  render() {\n    const {\n      canvasImage,\n      canvasTexts,\n      formValues\n    } = this.state;\n    const {\n      selectedTextBlock,\n      textBlocks\n    } = canvasTexts;\n    return jsx(\"div\", {\n      css: pageStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, jsx(Nav, {\n      onImageUploaded: this.setCanvasImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), jsx(\"section\", {\n      \"data-name\": \"bodycontainer\",\n      css: containerStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, jsx(LeftSidebar, {\n      addTextBlock: this.addTextBlock,\n      canvasRef: this.stageRef,\n      formValues: formValues,\n      onTextBlockInteracted: this.setSelectedTextBlock,\n      selectedTextBlock: selectedTextBlock,\n      textBlocks: textBlocks,\n      onInputChanged: this.setAdoptionFormField,\n      onTextChanged: this.onTextChanged,\n      addTextBlockWithData: this.addTextBlockWithData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), jsx(Canvas, {\n      canvasRef: this.stageRef,\n      canvasTexts: canvasTexts,\n      currentCanvasText: textBlocks[selectedTextBlock],\n      image: canvasImage,\n      onRef: this.stageRef,\n      onTextChanged: this.onTextBlockChanged,\n      onTextBlockSelected: this.setSelectedTextBlock,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/Lucas/Documents/quiltros/pages/index.tsx"],"names":["jsx","nanoid","Component","createRef","Canvas","LeftSidebar","Nav","containerStyle","pageStyle","Home","canvasImage","canvasTexts","selectedTextBlock","textBlocks","formValues","chip","esterilizado","vacunas","state","setState","image","key","value","id","text","console","log","newTextblock","color","fontSize","componentDidMount","addTextBlock","render","setCanvasImage","stageRef","setSelectedTextBlock","setAdoptionFormField","onTextChanged","addTextBlockWithData","onTextBlockChanged"],"mappings":"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","sourcesContent":["/** @jsx jsx */\r\nimport { jsx } from '@emotion/core';\r\nimport nanoid from 'nanoid';\r\nimport React, { Component, createRef } from 'react';\r\nimport Canvas from '../components/canvas';\r\nimport LeftSidebar from '../components/LeftSideBar';\r\nimport { ITextBlocksConfigPanelState } from '../components/LeftSideBar/TextBlocksCreator/panel';\r\nimport Nav from '../components/Nav';\r\nimport { containerStyle, pageStyle } from './styles'\r\n\r\ninterface IHomeState {\r\n  canvasImage: HTMLImageElement | null;\r\n  canvasTexts: ICanvasTexts;\r\n  formValues: IAdoptionForm;\r\n}\r\n\r\nexport interface ICanvasTexts {\r\n  selectedTextBlock: string; // TODO: Change this for a string union type\r\n  textBlocks: ITextBlocks\r\n}\r\n\r\ninterface ITextBlocks {\r\n    // TODO: Change keys on this objects also for a string uniion type.\r\n    // (Based on the types of TextBlocksCreator.buttonsKeys )\r\n    [s: string]: ITextBlocksConfigPanelState;\r\n}\r\n\r\nexport interface IAdoptionForm {\r\n  'nombre-mascota': string;\r\n  'nombre-contacto': string;\r\n  'telefono-contacto': string;\r\n  'whatsapp-contacto': string;\r\n  'email-contacto': string;\r\n  'esterilizado': boolean;\r\n  'chip': boolean;\r\n  'vacunas': boolean;\r\n  'edad-mascota': string;\r\n  'informacion-extra-mascota'?: string;\r\n  'tamaÃ±o-mascota': boolean;\r\n  'caso': string;\r\n  'ciudad': string;\r\n}\r\n\r\nclass Home extends Component<any, IHomeState> {\r\n  state = {\r\n    canvasImage: null,\r\n    canvasTexts: {\r\n      selectedTextBlock : '',\r\n      textBlocks: {} as ITextBlocks\r\n    },\r\n    formValues: {\r\n      chip: false,\r\n      'edad-mascota': '',\r\n      'email-contacto': '',\r\n      esterilizado: false,\r\n      'informacion-extra-mascota': '',\r\n      'nombre-contacto': '',\r\n      'nombre-mascota': '',\r\n      'tamaÃ±o-mascota': false,\r\n      'telefono-contacto': '',\r\n      vacunas: false,\r\n      'whatsapp-contacto': '',\r\n      'caso': '',\r\n      'ciudad': ''\r\n    }\r\n  };\r\n\r\n  stageRef = createRef<any>();\r\n\r\n  componentDidMount() {\r\n    this.addTextBlock();\r\n  }\r\n\r\n  setSelectedTextBlock = (selectedTextBlock: string) => {\r\n    const { canvasTexts } = this.state;\r\n    this.setState({\r\n      canvasTexts: {\r\n        ...canvasTexts,\r\n        selectedTextBlock\r\n      }\r\n    });\r\n  };\r\n\r\n  setCanvasImage = (image: HTMLImageElement) => {\r\n    this.setState({\r\n      canvasImage: image\r\n    });\r\n  };\r\n\r\n  onTextChanged = (key: string, value: string, id: string) => {\r\n    const { canvasTexts } = this.state;\r\n    const { textBlocks } = canvasTexts;\r\n    this.setState({\r\n      canvasTexts: {\r\n        ...canvasTexts,\r\n        textBlocks: {\r\n          ...textBlocks,\r\n          [id]: {\r\n            ...textBlocks[id],\r\n            [key]: value\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  onTextBlockChanged = (id: string, text: string) => {\r\n    const { canvasTexts } = this.state;\r\n    const { textBlocks } = canvasTexts;\r\n    this.setState(\r\n      {\r\n        canvasTexts: {\r\n          ...canvasTexts,\r\n          textBlocks: {\r\n            ...textBlocks,\r\n            [id]: {\r\n              ...textBlocks[id],\r\n              text\r\n            }\r\n          }\r\n        }\r\n      },\r\n      () => {\r\n        console.log(this.state);\r\n      }\r\n    );\r\n  };\r\n\r\n  setAdoptionFormField = (key: keyof IAdoptionForm, value: any) => {\r\n    this.setState({\r\n      formValues: {\r\n        ...this.state.formValues,\r\n        [key]: value\r\n      }\r\n    });\r\n  };\r\n\r\n  addTextBlock = () => {\r\n    const { canvasTexts } = this.state;\r\n    const { textBlocks } = canvasTexts;\r\n\r\n    const id = nanoid();\r\n    const newTextblock: ITextBlocksConfigPanelState = {\r\n      color: 'black',\r\n      fontSize: 'medium',\r\n      id,\r\n      text: ''\r\n    };\r\n\r\n    this.setState({\r\n      canvasTexts: {\r\n        ...canvasTexts,\r\n        textBlocks: {\r\n          ...textBlocks,\r\n          [id]: newTextblock\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  addTextBlockWithData = (id: string, text: string) => {\r\n    const { canvasTexts } = this.state;\r\n    const { textBlocks } = canvasTexts;\r\n\r\n    const newTextblock: ITextBlocksConfigPanelState = {\r\n      color: 'black',\r\n      fontSize: 'medium',\r\n      id,\r\n      text\r\n    };\r\n\r\n    this.setState({\r\n      canvasTexts: {\r\n        ...canvasTexts,\r\n        textBlocks: {\r\n          ...textBlocks,\r\n          [id]: newTextblock\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { canvasImage, canvasTexts, formValues } = this.state;\r\n    const { selectedTextBlock, textBlocks } = canvasTexts;\r\n\r\n    return (\r\n      <div css={pageStyle}>\r\n        <Nav onImageUploaded={this.setCanvasImage} />\r\n        <section data-name=\"bodycontainer\" css={containerStyle}>\r\n          <LeftSidebar\r\n            addTextBlock={this.addTextBlock}\r\n            canvasRef={this.stageRef}\r\n            formValues={formValues}\r\n            onTextBlockInteracted={this.setSelectedTextBlock}\r\n            selectedTextBlock={selectedTextBlock}\r\n            textBlocks={textBlocks}\r\n            onInputChanged={this.setAdoptionFormField}\r\n            onTextChanged={this.onTextChanged}\r\n            addTextBlockWithData={this.addTextBlockWithData}\r\n          />\r\n          <Canvas\r\n            canvasRef={this.stageRef}\r\n            canvasTexts={canvasTexts}\r\n            currentCanvasText={textBlocks[selectedTextBlock]}\r\n            image={canvasImage}\r\n            onRef={this.stageRef}\r\n            onTextChanged={this.onTextBlockChanged}\r\n            onTextBlockSelected={this.setSelectedTextBlock}\r\n          />\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n\r\n"]},"metadata":{},"sourceType":"module"}