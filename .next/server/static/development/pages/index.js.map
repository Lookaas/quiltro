{"version":3,"file":"static\\development\\pages\\index.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/LeftSideBar/ContactInformation/index.tsx","webpack:///./components/LeftSideBar/ContactInformation/style.ts","webpack:///./components/LeftSideBar/PetInformation/index.tsx","webpack:///./components/LeftSideBar/PetInformation/style.ts","webpack:///./components/LeftSideBar/SubmitButton/index.tsx","webpack:///./components/LeftSideBar/SubmitButton/style.ts","webpack:///./components/LeftSideBar/index.tsx","webpack:///./components/LeftSideBar/styles.ts","webpack:///./components/Nav/index.tsx","webpack:///./components/Nav/styles.ts","webpack:///./components/canvas/BackgroundImage/index.tsx","webpack:///./components/canvas/Text/index.tsx","webpack:///./components/canvas/TextArea/index.tsx","webpack:///./components/canvas/TextArea/style.ts","webpack:///./components/canvas/Transformer/index.tsx","webpack:///./components/canvas/index.tsx","webpack:///./components/canvas/style.ts","webpack:///./pages/index.tsx","webpack:///./pages/styles.ts","webpack:///external \"@blueprintjs/core\"","webpack:///external \"@emotion/core\"","webpack:///external \"nanoid\"","webpack:///external \"react\"","webpack:///external \"react-dom\"","webpack:///external \"react-konva\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","/** @jsx jsx */\r\nimport { Card, Elevation, FormGroup, H4, InputGroup } from '@blueprintjs/core';\r\nimport { jsx } from '@emotion/core';\r\nimport React, { FormEvent } from 'react';\r\nimport { IAdoptionForm } from '../../../pages';\r\nimport { sidebarContainerStyle } from './style';\r\n\r\nexport interface IContactInformationProps {\r\n  onChange: (key: keyof IAdoptionForm, value: any) => void;\r\n  formValues: IAdoptionForm;\r\n}\r\n\r\nexport default class ContactInformation extends React.Component<\r\n  IContactInformationProps,\r\n  any\r\n> {\r\n  render() {\r\n    const { onChange, formValues } = this.props;\r\n    return (\r\n      <Card elevation={Elevation.ONE} css={sidebarContainerStyle}>\r\n        <H4>Datos de contacto</H4>\r\n        <div>\r\n          <FormGroup label=\"Nombre\">\r\n            <InputGroup\r\n              placeholder=\"Nombre\"\r\n              name=\"nombre-contacto\"\r\n              required\r\n              value={formValues['nombre-contacto']}\r\n              onChange={ (e: FormEvent<HTMLInputElement>) : void => {\r\n                onChange('nombre-contacto', e.currentTarget.value);\r\n              }}\r\n            />\r\n          </FormGroup>\r\n        </div>\r\n        <div>\r\n          <FormGroup label=\"Teléfono\">\r\n            <InputGroup\r\n              placeholder=\"Teléfono\"\r\n              name=\"telefono-contacto\"\r\n              value={formValues['telefono-contacto']}\r\n              onChange={(e: FormEvent<HTMLInputElement>) : void => {\r\n                onChange('telefono-contacto', e.currentTarget.value);\r\n              }}\r\n              required\r\n            />\r\n          </FormGroup>\r\n        </div>\r\n        <div>\r\n          <FormGroup label=\"Whatsapp\">\r\n            <InputGroup\r\n              placeholder=\"Whatsapp\"\r\n              name=\"whatsapp-contacto\"\r\n              value={formValues['whatsapp-contacto']}\r\n              onChange={(e: FormEvent<HTMLInputElement>) : void => {\r\n                onChange('whatsapp-contacto', e.currentTarget.value);\r\n              }}\r\n            />\r\n          </FormGroup>\r\n        </div>\r\n        <div>\r\n          <FormGroup label=\"Email\">\r\n            <InputGroup\r\n              name=\"Email\"\r\n              type=\"email-contacto\"\r\n              placeholder=\"Email\"\r\n              value={formValues['email-contacto']}\r\n              onChange={(e: FormEvent<HTMLInputElement>) : void => {\r\n                onChange('email-contacto', e.currentTarget.value);\r\n              }}\r\n            />\r\n          </FormGroup>\r\n        </div>\r\n        <div>\r\n          <FormGroup label=\"Ciudad\">\r\n            <InputGroup\r\n              placeholder=\"Ciudad\"\r\n              name=\"ciudad-contacto\"\r\n              value={formValues['ciudad-contacto']}\r\n              onChange={(e: FormEvent<HTMLInputElement>) : void => {\r\n                onChange('ciudad-contacto', e.currentTarget.value);\r\n              }}\r\n            />\r\n          </FormGroup>\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n","import { css } from '@emotion/core';\r\n\r\nexport const sidebarContainerStyle = css`\r\n  margin: 1rem;\r\n  min-width: 300px;\r\n  width: 300px;\r\n`;\r\n","/** @jsx jsx */\r\nimport {\r\n  Card,\r\n  Checkbox,\r\n  Elevation,\r\n  FormGroup,\r\n  H4,\r\n  InputGroup,\r\n  Radio,\r\n  TextArea\r\n} from '@blueprintjs/core';\r\nimport { jsx } from '@emotion/core';\r\nimport React, { FormEvent } from 'react';\r\nimport { IAdoptionForm } from '../../../pages';\r\nimport { fakeRadioGroupStyle, sidebarContainerStyle } from './style';\r\n\r\nexport interface IPetInformationProps {\r\n  onChange: (key: keyof IAdoptionForm, value: any) => void;\r\n  addText: (id: string, value: string) => void;\r\n  formValues: IAdoptionForm;\r\n}\r\n\r\nexport default class PetInformation extends React.Component<\r\n  IPetInformationProps,\r\n  any\r\n> {\r\n  state = {\r\n    size: '',\r\n    caseOption: '',\r\n    sex: ''\r\n  };\r\n\r\n  onSizeChanged = (e: FormEvent<HTMLInputElement>) => {\r\n    const { onChange } = this.props;\r\n    const size = e.currentTarget.value;\r\n    this.setState({ size });\r\n    onChange('tamaño-mascota', size);\r\n  };\r\n\r\n  onCaseChanged = (e: FormEvent<HTMLInputElement>) => {\r\n    const { onChange } = this.props;\r\n    const caseOption = e.currentTarget.value;\r\n    this.setState({ caseOption });\r\n    onChange('caso-mascota', caseOption);\r\n  };\r\n\r\n  onSexChanged = (e: FormEvent<HTMLInputElement>) => {\r\n    const { onChange } = this.props;\r\n    const sex = e.currentTarget.value;\r\n    this.setState({ sex });\r\n    onChange('caso-mascota', sex);\r\n  };\r\n\r\n  render() {\r\n    const { onChange, formValues, addText } = this.props;\r\n    const { size, caseOption, sex } = this.state;\r\n    return (\r\n      <Card elevation={Elevation.ONE} css={sidebarContainerStyle}>\r\n        <H4>Información</H4>\r\n        <div>\r\n          <FormGroup label=\"Caso *\">\r\n            <Radio\r\n              name=\"caso\"\r\n              value={caseOption}\r\n              onChange={e => onChange('caso-mascota', caseOption)}\r\n              checked={Boolean(caseOption)}\r\n              required\r\n              css={fakeRadioGroupStyle}\r\n            />\r\n            <Radio\r\n              onChange={this.onCaseChanged}\r\n              checked={caseOption === '1'}\r\n              label=\"Mascota en adopción\"\r\n              value=\"1\"\r\n            />\r\n            <Radio\r\n              onChange={this.onCaseChanged}\r\n              checked={caseOption === '2'}\r\n              label=\"Mascota perdida\"\r\n              value=\"2\"\r\n            />\r\n          </FormGroup>\r\n        </div>\r\n        <div>\r\n          <FormGroup label={'Nombre'}>\r\n            <InputGroup\r\n              name=\"nombre-mascota\"\r\n              placeholder=\"Nombre\"\r\n              intent=\"primary\"\r\n              value={formValues['nombre-mascota']}\r\n              onChange={(e: FormEvent<HTMLInputElement>) : void => {\r\n                onChange('nombre-mascota', e.currentTarget.value);\r\n                addText('nombre-mascota', 'Me llamo ' + e.currentTarget.value);\r\n              }}\r\n              required\r\n            />\r\n          </FormGroup>\r\n        </div>\r\n        <div>\r\n          <FormGroup label=\"Tamaño *\">\r\n            <Radio\r\n              name=\"tamaño-mascota\"\r\n              value={size}\r\n              onChange={e => onChange('tamaño-mascota', Boolean(size))}\r\n              checked={Boolean(size)}\r\n              required\r\n              css={fakeRadioGroupStyle}\r\n            />\r\n            <Radio\r\n              onChange={this.onSizeChanged}\r\n              checked={size === 's'}\r\n              label=\"Pequeño\"\r\n              value=\"s\"\r\n            />\r\n            <Radio\r\n              onChange={this.onSizeChanged}\r\n              checked={size === 'm'}\r\n              label=\"Mediano\"\r\n              value=\"m\"\r\n            />\r\n            <Radio\r\n              onChange={this.onSizeChanged}\r\n              checked={size === 'l'}\r\n              label=\"Grande\"\r\n              value=\"l\"\r\n            />\r\n          </FormGroup>\r\n        </div>\r\n        <div>\r\n          <FormGroup label=\"Sexo *\">\r\n            <Radio\r\n              name=\"sexo-mascota\"\r\n              value={sex}\r\n              onChange={e => onChange('sexo-mascota', Boolean(sex))}\r\n              checked={Boolean(sex)}\r\n              required\r\n              css={fakeRadioGroupStyle}\r\n            />\r\n            <Radio\r\n              onChange={this.onSexChanged}\r\n              checked={sex === '1'}\r\n              label=\"Macho\"\r\n              value=\"1\"\r\n            />\r\n            <Radio\r\n              onChange={this.onSexChanged}\r\n              checked={sex === '2'}\r\n              label=\"Hembra\"\r\n              value=\"2\"\r\n            />\r\n          </FormGroup>\r\n        </div>\r\n        <div>\r\n          <Checkbox\r\n            name=\"esterilizado\"\r\n            label=\"¿Está esterilizado?\"\r\n            checked={formValues.esterilizado}\r\n            onChange={e => {\r\n              onChange('esterilizado', !formValues.esterilizado);\r\n            }}\r\n          />\r\n          <Checkbox\r\n            name=\"chip\"\r\n            label=\"¿Tiene chip?\"\r\n            checked={formValues.chip}\r\n            onChange={e => {\r\n              onChange('chip', !formValues.chip);\r\n            }}\r\n          />\r\n          <Checkbox\r\n            name=\"vacunas\"\r\n            label=\"¿Tiene las vacunas al día?\"\r\n            checked={formValues.vacunas}\r\n            onChange={e => {\r\n              onChange('vacunas', !formValues.vacunas);\r\n            }}\r\n          />\r\n        </div>\r\n        <div>\r\n          <FormGroup label=\"Edad\">\r\n            <InputGroup\r\n              name=\"edad-mascota\"\r\n              value={formValues['edad-mascota']}\r\n              onChange={(e: FormEvent<HTMLInputElement>) : void => onChange('edad-mascota', e.currentTarget.value)}\r\n              placeholder=\"Años\"\r\n              required\r\n            />\r\n          </FormGroup>\r\n        </div>\r\n        <div>\r\n          <FormGroup label=\"Información Extra\">\r\n            <TextArea\r\n              fill\r\n              growVertically\r\n              name=\"informacion-extra-mascota\"\r\n              placeholder=\"Extra\"\r\n              value={formValues['informacion-extra-mascota']}\r\n              onChange={e =>\r\n                onChange('informacion-extra-mascota', e.currentTarget.value)\r\n              }\r\n            />\r\n          </FormGroup>\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n","import { css } from '@emotion/core';\r\n\r\nexport const sidebarContainerStyle = css`\r\n  margin: 1rem;\r\n  min-width: 300px;\r\n  width: 300px;\r\n`;\r\n\r\nexport const fakeRadioGroupStyle = css`\r\n  opacity: 0;\r\n  height: 1;\r\n  position: absolute;\r\n`;\r\n","/** @jsx jsx */\r\nimport { Button } from '@blueprintjs/core';\r\nimport { jsx } from '@emotion/core';\r\nimport React from 'react';\r\nimport { sidebarContainerStyle } from './style';\r\n\r\nclass SubmitButton extends React.Component {\r\n  render() {\r\n    return (\r\n      <div css={sidebarContainerStyle}>\r\n        <Button type=\"submit\" intent=\"none\" rightIcon=\"floppy-disk\">\r\n          Crear Imagen\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubmitButton;\r\n","import { css } from '@emotion/core';\r\n\r\nexport const sidebarContainerStyle = css`\r\n  margin: 1rem;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n`;\r\n","/** @jsx jsx */\r\nimport { jsx } from '@emotion/core';\r\nimport React, { Component, FormEvent, RefObject } from 'react';\r\nimport ReactGA from 'react-ga';\r\n\r\nimport { IAdoptionForm } from '../../pages';\r\nimport ContactInformation from './ContactInformation';\r\nimport PetInformation from './PetInformation';\r\nimport SubmitButton from './SubmitButton';\r\nimport TextBlocksCreator from './TextBlocksCreator';\r\nimport { ITextBlocksConfigPanelState } from './TextBlocksCreator/panel';\r\nimport { containerStyle } from './styles'\r\n\r\nexport interface ILeftSidebarProps {\r\n  canvasRef: RefObject<any>;\r\n  formValues: IAdoptionForm;\r\n  selectedTextBlock: string;\r\n  textBlocks: {\r\n    [id: string]: ITextBlocksConfigPanelState;\r\n  };\r\n  addTextBlock: () => void;\r\n  addTextBlockWithData: (id: string, value: string) => void;\r\n  onInputChanged: (key: keyof IAdoptionForm, value: any) => void;\r\n  onTextBlockInteracted: (key: string) => void;\r\n  onTextChanged: (key: string, value: string, id: string) => void;\r\n}\r\n\r\nexport interface ILeftSidebarState {\r\n  isFormValid: boolean;\r\n}\r\n\r\nexport default class LeftSidebar extends Component<\r\n  ILeftSidebarProps,\r\n  ILeftSidebarState\r\n> {\r\n  state = {\r\n    isFormValid: false\r\n  };\r\n\r\n  getDataByKey = (form: IAdoptionForm, key: keyof IAdoptionForm) => {\r\n    return form[key]!.toString();\r\n  }\r\n\r\n  getFormData = (): { formData: FormData; formJson: object } => {\r\n    const formData = new FormData();\r\n    const { formValues } = this.props;\r\n    for (const key in formValues) {\r\n      if (formValues.hasOwnProperty(key)) {\r\n        const element: string = this.getDataByKey(formValues, key as keyof IAdoptionForm);\r\n        formData.append(key, element);\r\n      }\r\n    }\r\n    const imageBlob = this.onExportImageClicked();\r\n    formData.append('image', imageBlob);\r\n    return {\r\n      formData,\r\n      formJson: formValues\r\n    };\r\n  };\r\n\r\n  dataURItoBlob = (dataURI: String) => {\r\n    let byteString;\r\n    let mimestring;\r\n\r\n    if (dataURI.split(',')[0].indexOf('base64') !== -1) {\r\n      byteString = atob(dataURI.split(',')[1]);\r\n    } else {\r\n      byteString = decodeURI(dataURI.split(',')[1]);\r\n    }\r\n    mimestring = dataURI\r\n      .split(',')[0]\r\n      .split(':')[1]\r\n      .split(';')[0];\r\n    const content = new Array();\r\n    for (let i = 0; i < byteString.length; i++) {\r\n      content[i] = byteString.charCodeAt(i);\r\n    }\r\n    return new Blob([new Uint8Array(content)], { type: mimestring });\r\n  };\r\n\r\n  onExportImageClicked = () => {\r\n    const imgB64 = this.props.canvasRef.current!.toDataURL({ pixelRatio: 2 });\r\n    const blob = this.dataURItoBlob(imgB64);\r\n    return blob;\r\n  };\r\n\r\n  onSubmit = async (e: FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    const imgB64 = this.props.canvasRef.current!.toDataURL({ pixelRatio: 2 });\r\n    let link = document.createElement('a');\r\n    link.download = \"Test.png\";\r\n    link.href = imgB64;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    /*const { formData, formJson } = this.getFormData();\r\n    const response = await fetch('/api/image', {\r\n      body: formData,\r\n      method: 'POST'\r\n    }).then(r => r.json());\r\n\r\n    ReactGA.event({\r\n      action: 'adoption-created',\r\n      category: 'User',\r\n      value: 1,\r\n      ...formJson\r\n    });*/\r\n  };\r\n\r\n  onFormChange = (e: FormEvent<HTMLFormElement>) => {\r\n    const isFormValid = e.currentTarget.checkValidity();\r\n    this.setState({\r\n      isFormValid\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      onTextChanged,\r\n      formValues,\r\n      onInputChanged,\r\n      onTextBlockInteracted,\r\n      selectedTextBlock,\r\n      addTextBlock,\r\n      textBlocks,\r\n      addTextBlockWithData\r\n    } = this.props;\r\n    return (\r\n      <form onSubmit={this.onSubmit} onChange={this.onFormChange} css={containerStyle} method=\"post\">\r\n        <PetInformation onChange={onInputChanged} formValues={formValues} addText={addTextBlockWithData} />\r\n        <div>\r\n          <ContactInformation onChange={onInputChanged} formValues={formValues} />\r\n          <SubmitButton />\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import { css } from '@emotion/core';\r\n\r\nexport const containerStyle = css`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n`;\r\n","/** @jsx jsx */\r\nimport { Alignment, Button, Navbar } from '@blueprintjs/core';\r\nimport { jsx } from '@emotion/core';\r\nimport React, { Component, createRef, ChangeEvent, FormEvent } from 'react';\r\nimport { fileUpload, navContainerStyle } from './styles';\r\n\r\ninterface INavProps {\r\n  onImageUploaded: (prop1: HTMLImageElement) => void;\r\n}\r\nclass Nav extends Component<INavProps> {\r\n  private inputFileRef = createRef<HTMLInputElement>();\r\n\r\n  openFile = () => {\r\n    this.inputFileRef.current!.click();\r\n  };\r\n\r\n  loadImageOntoReader = (event: ProgressEvent<FileReader>) => {\r\n    const img = new Image();\r\n    img.src = event.target!.result as string;\r\n    img.addEventListener('load', () => {\r\n      this.props.onImageUploaded(img);\r\n    });\r\n  };\r\n\r\n  onFileUploaded = (e: FormEvent<HTMLInputElement>) => {\r\n    const reader = new FileReader();\r\n    reader.onload = this.loadImageOntoReader;\r\n    const file : File = e.currentTarget.files![0];\r\n    if (!file) {\r\n      console.error('!file', file, e);\r\n    }\r\n    reader.readAsDataURL(e.currentTarget.files![0]);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Navbar css={navContainerStyle}>\r\n        <Navbar.Group align={Alignment.LEFT}>\r\n          <Navbar.Heading>Quiltro</Navbar.Heading>\r\n          <Navbar.Divider />\r\n        </Navbar.Group>\r\n        <Navbar.Group align={Alignment.RIGHT}>\r\n          <Navbar.Divider />\r\n          <Button\r\n            intent=\"primary\"\r\n            rightIcon=\"upload\"\r\n            text=\"Subir Imagen\"\r\n            onClick={this.openFile}\r\n          />\r\n          <input\r\n            ref={this.inputFileRef}\r\n            onChange={this.onFileUploaded}\r\n            type=\"file\"\r\n            css={fileUpload}\r\n          />\r\n        </Navbar.Group>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Nav;\r\n","import { css } from '@emotion/core';\r\n\r\nexport const navContainerStyle = css``;\r\n\r\nexport const ulStyle = css`\r\n  display: flex;\r\n  flex: 1;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nexport const fileUpload = css`\r\n  display: none;\r\n`;\r\n\r\nexport const buttonStyle = css`\r\n  display: flex;\r\n`;\r\n","/** @jsx jsx */\r\nimport { jsx } from '@emotion/core';\r\nimport React from 'react';\r\n\r\nimport { Image as KonvaImage, Layer } from 'react-konva';\r\n\r\nexport interface IBackgroundImageProps {\r\n  backgroundImage: HTMLImageElement | null;\r\n  canvasHeight: number;\r\n  canvasWidth: number;\r\n}\r\n\r\nexport default class BackgroundImage extends React.Component<\r\n  IBackgroundImageProps,\r\n  any\r\n> {\r\n  render() {\r\n    const { backgroundImage, canvasHeight, canvasWidth } = this.props;\r\n    if (!backgroundImage) {\r\n      return null;\r\n    }\r\n    const { height, width } = backgroundImage;\r\n    const medianWidth = -(width - canvasWidth) / 2;\r\n    const medianHeight = -(height - canvasHeight) / 2;\r\n\r\n    return (\r\n      <Layer>\r\n        {backgroundImage && (\r\n          <KonvaImage\r\n            image={backgroundImage}\r\n            x={medianWidth}\r\n            y={medianHeight}\r\n          />\r\n        )}\r\n      </Layer>\r\n    );\r\n  }\r\n}\r\n","/** @jsx jsx */\r\nimport { jsx } from '@emotion/core';\r\nimport { KonvaEventObject } from 'konva/types/Node';\r\nimport React, { createRef } from 'react';\r\nimport { Text } from 'react-konva';\r\nimport { ITextBlocksConfigPanelState } from '../../LeftSideBar/TextBlocksCreator/panel';\r\n\r\ninterface ICanvasText extends ITextBlocksConfigPanelState {\r\n  maxWidth: number;\r\n  maxHeight: number;\r\n  position: {\r\n    x: number;\r\n    y: number;\r\n  };\r\n  // width: number;\r\n  // height: number;\r\n  onDoubleClick: (evt: KonvaEventObject<MouseEvent>) => void;\r\n  onClick: (evt: KonvaEventObject<MouseEvent>) => void;\r\n  onMouseDown: (evt: KonvaEventObject<MouseEvent>) => void;\r\n  id: string;\r\n}\r\n\r\nclass CanvasText extends React.Component<ICanvasText, any> {\r\n  static getDerivedStateFromProps(props: any) {\r\n    let stateFontSize = 10;\r\n    const { fontSize } = props;\r\n    if (fontSize === 'small') {\r\n      stateFontSize = 14;\r\n    }\r\n    if (fontSize === 'medium') {\r\n      stateFontSize = 21;\r\n    }\r\n    if (fontSize === 'large') {\r\n      stateFontSize = 35;\r\n    }\r\n    console.log();\r\n    return {\r\n      fontSize: stateFontSize\r\n    };\r\n  }\r\n\r\n  state = {\r\n    fontSize: 10\r\n  };\r\n\r\n  transformerRef = createRef<any>();\r\n\r\n  getNewPosition = (pos: {x: number, y: number}) => {\r\n    const { maxWidth, maxHeight } = this.props;\r\n    const ref = this.transformerRef.current!;\r\n\r\n    const topBorder = pos.y;\r\n    const bottomBorder = pos.y + ref.height();\r\n    const leftBorder = pos.x;\r\n    const rightBorder = pos.x + ref.width();\r\n\r\n    let x = pos.x;\r\n    let y = pos.y;\r\n    if (topBorder < 0) {\r\n      y = 0;\r\n    } else if (bottomBorder > maxHeight) {\r\n      y = maxHeight - ref.height();\r\n    }\r\n\r\n    if (leftBorder < 0) {\r\n      x = 0;\r\n    } else if (rightBorder > maxWidth) {\r\n      x = maxWidth - ref.width();\r\n    }\r\n    return {\r\n      x,\r\n      y\r\n    };\r\n  };\r\n\r\n  onTransform = () => {\r\n    const ref = this.transformerRef.current!;\r\n    ref.setAttrs({\r\n      scaleX: 1,\r\n      width: ref.width() * ref.scaleX()\r\n    });\r\n  };\r\n\r\n  onDrag = (pos: {x: number, y: number}) => {\r\n    return this.getNewPosition(pos);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      id,\r\n      text,\r\n      color,\r\n      onDoubleClick,\r\n      onClick,\r\n      onMouseDown,\r\n      position\r\n    } = this.props;\r\n    const { fontSize } = this.state;\r\n    return (\r\n      <Text\r\n        padding={10}\r\n        fontSize={fontSize}\r\n        ref={this.transformerRef}\r\n        name={id}\r\n        id={id}\r\n        fill={color}\r\n        text={text}\r\n        x={position.x}\r\n        y={position.y}\r\n        transformsEnabled=\"position\"\r\n        draggable\r\n        dragBoundFunc={this.onDrag}\r\n        onTransform={this.onTransform}\r\n        onClick={onClick}\r\n        onDblClick={onDoubleClick}\r\n        onMouseDown={onMouseDown}\r\n        // _useStrictMode\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default CanvasText;\r\n","/** @jsx jsx */\r\nimport { jsx } from '@emotion/core';\r\nimport React, {\r\n  Component,\r\n  FormEvent,\r\n  KeyboardEvent\r\n} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { textaAreaStyle } from './style';\r\n\r\nexport interface IEditTextArea {\r\n  maxWidth: number;\r\n  maxHeight: number;\r\n  selectedtextblockid: string;\r\n  onTextAreaChanged: (attr1: string, attr2: string) => void;\r\n  onTextAreaClosed: () => void;\r\n  value: string;\r\n  style: any;\r\n}\r\n\r\nclass EditTextArea extends Component<IEditTextArea> {\r\n  state = {\r\n    height: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      height: this.props.style.height\r\n    });\r\n  }\r\n\r\n  onChange = (e: FormEvent<HTMLTextAreaElement>) : void => {\r\n    const { onTextAreaChanged, selectedtextblockid } = this.props;\r\n    const { currentTarget } = e;\r\n    const { height } = this.state;\r\n    const { value, scrollHeight } = currentTarget;\r\n    console.log(selectedtextblockid, value);\r\n    onTextAreaChanged(selectedtextblockid, value);\r\n    if (scrollHeight !== height) {\r\n      this.setState({\r\n        height: scrollHeight\r\n      });\r\n    }\r\n  };\r\n\r\n  onKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) : void => {\r\n    const { onTextAreaClosed } = this.props;\r\n    const { keyCode, shiftKey } = e;\r\n\r\n    // If key is 'enter' and shift key is pressed\r\n    if (keyCode === 13 && !shiftKey) {\r\n      // End editing\r\n      onTextAreaClosed();\r\n    }\r\n\r\n    // If key is 'esc'\r\n    if (keyCode === 27) {\r\n      // End editing\r\n      onTextAreaClosed();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (!document) {\r\n      return;\r\n    }\r\n    const domNode = document.querySelector('#portal_container');\r\n    if (!domNode) {\r\n      return;\r\n    }\r\n    const { height } = this.state;\r\n    const {\r\n      style,\r\n      maxWidth,\r\n      maxHeight,\r\n      onTextAreaClosed,\r\n      onTextAreaChanged,\r\n      ...restOfProps\r\n    } = this.props;\r\n    const { height: _, ...rest } = style;\r\n    return ReactDOM.createPortal(\r\n      <textarea\r\n        autoFocus\r\n        css={textaAreaStyle}\r\n        onKeyDown={this.onKeyDown}\r\n        onChange={this.onChange}\r\n        style={{\r\n          ...rest,\r\n          height,\r\n          maxWeight: `${maxHeight}px`,\r\n          maxWidth: `${maxWidth}px`\r\n        }}\r\n        {...restOfProps}\r\n      />,\r\n      domNode\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditTextArea;\r\n","import { css } from '@emotion/core';\r\n\r\nexport const textaAreaStyle = css`\r\n  position: absolute;\r\n  z-index: 100;\r\n  border-style: solid;\r\n  border-width: 1.5px;\r\n  border-color: #5ac2ff;\r\n  margin: 0px;\r\n  overflow: hidden;\r\n  background: none;\r\n  outline: none;\r\n  resize: none;\r\n`;\r\n","/** @jsx jsx */\r\nimport { jsx } from '@emotion/core';\r\nimport Konva from 'konva';\r\nimport React, { createRef, RefObject } from 'react';\r\nimport { Transformer } from 'react-konva';\r\nimport { IRect } from 'konva/types/types';\r\n\r\ninterface Box extends IRect {\r\n  rotation: number;\r\n}\r\n\r\ninterface ITransformerComponent extends Konva.TransformerConfig {\r\n  selectedShapeName: string;\r\n  onMount: (arg1: RefObject<any>) => void;\r\n}\r\n\r\nclass TransformerComponent extends React.Component<ITransformerComponent> {\r\n  static defaultProps = {\r\n    minWidth: 50\r\n  };\r\n\r\n  transformerRef = createRef<any>();\r\n\r\n  componentDidMount() {\r\n    this.checkNode();\r\n    this.props.onMount(this.transformerRef);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.checkNode();\r\n  }\r\n\r\n  checkNode() {\r\n    // We manually attach or detach a node to the Transformer\r\n    const ref = this.transformerRef.current!;\r\n    const stage = ref.getStage();\r\n    const { selectedShapeName } = this.props;\r\n    const selectedNode = stage.findOne('.' + selectedShapeName);\r\n    // do nothing if the selected node is already attached to the transformer\r\n    if (selectedNode === ref.node()) {\r\n      return;\r\n    }\r\n    if (selectedNode) {\r\n      // attach transformer to another node\r\n      ref.attachTo(selectedNode);\r\n    } else {\r\n      // remove current ref from the fransformer\r\n      ref.detach();\r\n    }\r\n    // Trigger a draw for the layer\r\n    ref.getLayer().batchDraw();\r\n  }\r\n\r\n  boundFoxFunction = (oldBox: Box, newBox: Box) => {\r\n    const { minWidth } = this.props;\r\n    const ref = this.transformerRef.current!;\r\n    const stageWidth = ref.getStage().width();\r\n    if (newBox.width > stageWidth - 10) {\r\n      const maxWidth = Math.min(newBox.width, stageWidth - 10);\r\n      newBox.width = maxWidth;\r\n    } else {\r\n      const width = Math.max(minWidth, newBox.width);\r\n      newBox.width = width;\r\n    }\r\n    return newBox;\r\n  };\r\n\r\n  render() {\r\n    const { selectedShapeName, ...rest } = this.props;\r\n    return (\r\n      <Transformer\r\n        ref={this.transformerRef}\r\n        enabledAnchors={['middle-left', 'middle-right']}\r\n        boundBoxFunc={this.boundFoxFunction}\r\n        {...rest}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default TransformerComponent;\r\n","/** @jsx jsx */\r\nimport { Card, Elevation } from '@blueprintjs/core';\r\nimport { jsx } from '@emotion/core';\r\nimport { KonvaEventObject } from 'konva/types/Node';\r\nimport Konva from 'konva'\r\nimport React, { Component, createRef, RefObject } from 'react';\r\nimport { Layer, Stage } from 'react-konva';\r\n\r\nimport { ICanvasTexts } from '../../pages';\r\nimport { ITextBlocksConfigPanelState } from '../LeftSideBar/TextBlocksCreator/panel';\r\nimport BackgroundImage from './BackgroundImage';\r\nimport EditTextArea from './TextArea';\r\nimport { canvasStyle } from './style';\r\nimport CanvasText from './Text';\r\nimport TransformerComponent from './Transformer';\r\n\r\ninterface IAppProps {\r\n  onRef: RefObject<any>;\r\n  canvasRef: RefObject<any>;\r\n  onTextBlockSelected: (arg1: string) => void;\r\n  image: HTMLImageElement | null;\r\n  canvasTexts: ICanvasTexts;\r\n  onTextChanged: (arg1: string, arg2: string) => void;\r\n  currentCanvasText: ITextBlocksConfigPanelState;\r\n}\r\n\r\ninterface IAppState {\r\n  showEditTextArea: boolean;\r\n  backgroundImage: HTMLImageElement | null;\r\n  editTextAreaProps: any;\r\n  onTextAreaClosed: () => void;\r\n  targetToRestore: any[];\r\n  editTextAreaValue: string;\r\n}\r\nclass Canvas extends Component<IAppProps, IAppState> {\r\n  state = {\r\n    backgroundImage: null,\r\n    canvasHeight: 750,\r\n    canvasWidth: 500,\r\n    editTextAreaProps: {},\r\n    editTextAreaValue: '',\r\n    onTextAreaClosed: () => null,\r\n    showEditTextArea: false,\r\n    targetToRestore: []\r\n  };\r\n\r\n  transformerRef = createRef<any>();\r\n\r\n  resizeImageHeight = (img: HTMLImageElement, newHeight: number, newWidth: number): Promise<HTMLImageElement> => {\r\n    const canvas = document.createElement('canvas');\r\n    canvas.height = newHeight;\r\n    canvas.width = newWidth;\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) {\r\n      return Promise.resolve(img);\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      ctx.drawImage(img, 0, 0);\r\n      ctx.drawImage(img, 0, 0, newWidth, newHeight);\r\n      const dataurl = canvas.toDataURL('image/png');\r\n\r\n      const newImage = new Image();\r\n      newImage.src = dataurl;\r\n      newImage.addEventListener('load', () => {\r\n        resolve(newImage);\r\n      });\r\n      newImage.addEventListener('error', () => {\r\n        reject(img);\r\n      });\r\n    });\r\n  };\r\n\r\n  getResizedImage = (image: HTMLImageElement) => {\r\n    const { height, width } = image;\r\n    const { canvasHeight, canvasWidth } = this.state;\r\n    let imageHeight = height;\r\n    let imageWidth = width;\r\n    // Resize to go over the canvas height\r\n    imageWidth = imageWidth * (canvasHeight / imageHeight);\r\n    imageHeight = canvasHeight;\r\n\r\n    // Resize to go over the canvas width\r\n    if (canvasWidth > imageWidth) {\r\n      imageHeight = imageHeight * (canvasWidth / imageWidth);\r\n      imageWidth = canvasWidth;\r\n    }\r\n    return this.resizeImageHeight(image, imageHeight, imageWidth);\r\n  };\r\n\r\n  async componentDidUpdate(prevProps: any) {\r\n    const { image } = this.props;\r\n    if (image && image !== prevProps.image) {\r\n      const backgroundImage = await this.getResizedImage(image);\r\n      this.setState({ backgroundImage });\r\n    }\r\n  }\r\n\r\n  onTextClick = (e:Konva.KonvaEventObject<MouseEvent>): void => {\r\n    e.cancelBubble = true;\r\n    const selectedTextBlock = e.target.name();\r\n    this.props.onTextBlockSelected(selectedTextBlock);\r\n  };\r\n\r\n  handleStageMouseDown = (e: Konva.KonvaEventObject<MouseEvent>) => {\r\n    const showEditTextArea = false;\r\n    let selectedTextBlock = '';\r\n    const { currentTarget } = e;\r\n    const { targetToRestore } = this.state;\r\n    const { onTextBlockSelected } = this.props;\r\n    /*const clickedOnStage = target === currentTarget.getStage();\r\n    //const clickedOnTransformer =\r\n    //  target.getParent() && target.getParent().className === 'Transformer';\r\n    //const hasNoName = Boolean(target.name()); // If the thing we are clicking has no name\r\n    const isTextNode = typeof e.currentTarget.stat === 'function'; // TODO: maybe remove this?\r\n    if (isTextNode) {\r\n      selectedTextBlock = e.target.name;\r\n    }*/\r\n\r\n    if (targetToRestore) {\r\n      targetToRestore.forEach((el: any) => {\r\n        const canvasRef = this.props.canvasRef.current!;\r\n        el.show();\r\n        canvasRef.draw();\r\n      });\r\n    }\r\n\r\n    this.setState(\r\n      {\r\n        showEditTextArea\r\n      },\r\n      () => onTextBlockSelected(selectedTextBlock)\r\n    );\r\n  };\r\n\r\n  showElements = (currentTarget: any) => () => {\r\n    this.setState(\r\n      {\r\n        showEditTextArea: false\r\n      },\r\n      () => {\r\n        currentTarget.hide();\r\n        const transformerRef = this.transformerRef.current!;\r\n        const canvasRef = this.props.canvasRef.current!;\r\n        currentTarget.show();\r\n        transformerRef.show();\r\n        canvasRef.draw();\r\n      }\r\n    );\r\n  };\r\n\r\n  hideElements = (currentTarget: any) => {\r\n    currentTarget.hide();\r\n    const transformerRef = this.transformerRef.current!;\r\n    const canvasRef = this.props.canvasRef.current!;\r\n    currentTarget.hide();\r\n    transformerRef.hide();\r\n    canvasRef.draw();\r\n  };\r\n\r\n  onMouseDown = (evt: KonvaEventObject<MouseEvent>): void => {\r\n    const { onTextBlockSelected } = this.props;\r\n    evt.cancelBubble = true;\r\n    const currentTarget: any = evt.target;\r\n    const { id } = currentTarget.attrs;\r\n    onTextBlockSelected(id);\r\n  };\r\n\r\n  onDoubleClick = (evt: KonvaEventObject<MouseEvent>): void => {\r\n    const currentTarget: any = evt.currentTarget;\r\n    const transformerRef = this.transformerRef.current!;\r\n    const canvasRef = this.props.canvasRef.current!;\r\n    this.hideElements(currentTarget);\r\n\r\n    // We will create a textarea absolutely positioned over the canvas\r\n    // And we will render it on a portal\r\n    // first we need to find position for textarea\r\n\r\n    // At first lets find position of text node relative to the stage:\r\n    const { x, y } = currentTarget.absolutePosition();\r\n    const { left, top } = canvasRef.container().getBoundingClientRect();\r\n\r\n    // so position of textarea will be the sum of positions above:\r\n    const areaPosition = {\r\n      x: left + x,\r\n      y: top + y\r\n    };\r\n\r\n    // Create textarea styles to match text on canvas as close as possible\r\n    // (Text rendering on canvas and on the textarea can be different\r\n    // and sometimes it is hard to make it 100% the same)\r\n    const targetToRestore = [currentTarget, transformerRef];\r\n    const showEditTextArea = true;\r\n    const editTextAreaValue = currentTarget.text();\r\n    const editTextAreaProps = {\r\n      color: currentTarget.fill() + '',\r\n      fontFamily: currentTarget.fontFamily() + '',\r\n      fontSize: currentTarget.fontSize() + 'px',\r\n      height: currentTarget.height() + 'px',\r\n      left: areaPosition.x + 'px',\r\n      lineHeight: currentTarget.lineHeight() + '',\r\n      padding: currentTarget.padding() + 'px',\r\n      textAlign: currentTarget.align() + '',\r\n      top: areaPosition.y + 'px',\r\n      transformOrigin: 'left top',\r\n      width: currentTarget.width() + 5 + 'px'\r\n    };\r\n\r\n    const onTextAreaClosed = this.showElements(currentTarget);\r\n\r\n    this.setState({\r\n      editTextAreaProps,\r\n      editTextAreaValue,\r\n      onTextAreaClosed,\r\n      showEditTextArea,\r\n      targetToRestore\r\n    });\r\n  };\r\n\r\n  onMount = (ref : RefObject<any>) => {\r\n    this.transformerRef = ref;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      backgroundImage,\r\n      canvasHeight,\r\n      canvasWidth,\r\n      showEditTextArea,\r\n      editTextAreaProps,\r\n      onTextAreaClosed\r\n    } = this.state;\r\n    const { canvasTexts, onRef, onTextChanged } = this.props;\r\n    const { textBlocks, selectedTextBlock } = canvasTexts;\r\n    return (\r\n      <Card elevation={Elevation.ONE} css={canvasStyle}>\r\n        {process.browser && (\r\n          <Stage\r\n            ref={onRef}\r\n            width={canvasWidth}\r\n            height={canvasHeight}\r\n            onClick={this.handleStageMouseDown}\r\n          >\r\n            <BackgroundImage\r\n              backgroundImage={backgroundImage}\r\n              canvasHeight={canvasHeight}\r\n              canvasWidth={canvasWidth}\r\n            />\r\n            <Layer>\r\n              {Object.values(textBlocks).map(textBlock => (\r\n                <CanvasText\r\n                  key={textBlock.id}\r\n                  {...textBlock}\r\n                  position={{ x: 0, y: 0 }}\r\n                  maxHeight={canvasHeight}\r\n                  maxWidth={canvasWidth}\r\n                  onClick={this.onTextClick}\r\n                  onDoubleClick={this.onDoubleClick}\r\n                  onMouseDown={this.onMouseDown}\r\n                />\r\n              ))}\r\n              <TransformerComponent\r\n                resizeEnabled\r\n                rotateEnabled={false}\r\n                borderEnabled\r\n                onMount={this.onMount}\r\n                selectedShapeName={selectedTextBlock}\r\n              />\r\n            </Layer>\r\n          </Stage>\r\n        )}\r\n        {showEditTextArea && textBlocks[selectedTextBlock].text && (\r\n          <EditTextArea\r\n            onTextAreaClosed={onTextAreaClosed}\r\n            onTextAreaChanged={onTextChanged}\r\n            selectedtextblockid={selectedTextBlock}\r\n            value={textBlocks[selectedTextBlock].text}\r\n            style={editTextAreaProps}\r\n            maxWidth={canvasWidth}\r\n            maxHeight={canvasHeight}\r\n          />\r\n        )}\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Canvas;\r\n","import { css } from '@emotion/core';\r\n\r\nexport const canvasStyle = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin: 1rem;\r\n  width: 35rem;\r\n  justify-content: center;\r\n  & .konvajs-content {\r\n    background: ghostwhite;\r\n    border: solid 1px lightgray;\r\n  }\r\n`;\r\n","/** @jsx jsx */\r\nimport { jsx } from '@emotion/core';\r\nimport nanoid from 'nanoid';\r\nimport React, { Component, createRef } from 'react';\r\nimport Canvas from '../components/canvas';\r\nimport LeftSidebar from '../components/LeftSideBar';\r\nimport { ITextBlocksConfigPanelState } from '../components/LeftSideBar/TextBlocksCreator/panel';\r\nimport Nav from '../components/Nav';\r\nimport { containerStyle, pageStyle } from './styles'\r\n\r\ninterface IHomeState {\r\n  canvasImage: HTMLImageElement | null;\r\n  canvasTexts: ICanvasTexts;\r\n  formValues: IAdoptionForm;\r\n}\r\n\r\nexport interface ICanvasTexts {\r\n  selectedTextBlock: string; // TODO: Change this for a string union type\r\n  textBlocks: ITextBlocks\r\n}\r\n\r\ninterface ITextBlocks {\r\n    // TODO: Change keys on this objects also for a string uniion type.\r\n    // (Based on the types of TextBlocksCreator.buttonsKeys )\r\n    [s: string]: ITextBlocksConfigPanelState;\r\n}\r\n\r\nexport interface IAdoptionForm {\r\n  'nombre-mascota': string;\r\n  'nombre-contacto': string;\r\n  'telefono-contacto': string;\r\n  'whatsapp-contacto': string;\r\n  'email-contacto': string;\r\n  'esterilizado': boolean;\r\n  'chip': boolean;\r\n  'vacunas': boolean;\r\n  'edad-mascota': string;\r\n  'informacion-extra-mascota'?: string;\r\n  'tamaño-mascota': string;\r\n  'caso-mascota': string;\r\n  'ciudad-contacto': string;\r\n  'sexo-mascota': string;\r\n}\r\n\r\nclass Home extends Component<any, IHomeState> {\r\n  state = {\r\n    canvasImage: null,\r\n    canvasTexts: {\r\n      selectedTextBlock : '',\r\n      textBlocks: {} as ITextBlocks\r\n    },\r\n    formValues: {\r\n      chip: false,\r\n      'edad-mascota': '',\r\n      'email-contacto': '',\r\n      esterilizado: false,\r\n      'informacion-extra-mascota': '',\r\n      'nombre-contacto': '',\r\n      'nombre-mascota': '',\r\n      'tamaño-mascota': '',\r\n      'telefono-contacto': '',\r\n      vacunas: false,\r\n      'whatsapp-contacto': '',\r\n      'caso-mascota': '',\r\n      'ciudad-contacto': '',\r\n      'sexo-mascota': ''\r\n    }\r\n  };\r\n\r\n  stageRef = createRef<any>();\r\n\r\n  componentDidMount() {\r\n    this.addTextBlock();\r\n  }\r\n\r\n  setSelectedTextBlock = (selectedTextBlock: string) => {\r\n    const { canvasTexts } = this.state;\r\n    this.setState({\r\n      canvasTexts: {\r\n        ...canvasTexts,\r\n        selectedTextBlock\r\n      }\r\n    });\r\n  };\r\n\r\n  setCanvasImage = (image: HTMLImageElement) => {\r\n    this.setState({\r\n      canvasImage: image\r\n    });\r\n  };\r\n\r\n  onTextChanged = (key: string, value: string, id: string) => {\r\n    const { canvasTexts } = this.state;\r\n    const { textBlocks } = canvasTexts;\r\n    this.setState({\r\n      canvasTexts: {\r\n        ...canvasTexts,\r\n        textBlocks: {\r\n          ...textBlocks,\r\n          [id]: {\r\n            ...textBlocks[id],\r\n            [key]: value\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  onTextBlockChanged = (id: string, text: string) => {\r\n    const { canvasTexts } = this.state;\r\n    const { textBlocks } = canvasTexts;\r\n    this.setState(\r\n      {\r\n        canvasTexts: {\r\n          ...canvasTexts,\r\n          textBlocks: {\r\n            ...textBlocks,\r\n            [id]: {\r\n              ...textBlocks[id],\r\n              text\r\n            }\r\n          }\r\n        }\r\n      },\r\n      () => {\r\n        console.log(this.state);\r\n      }\r\n    );\r\n  };\r\n\r\n  setAdoptionFormField = (key: keyof IAdoptionForm, value: any) => {\r\n    this.setState({\r\n      formValues: {\r\n        ...this.state.formValues,\r\n        [key]: value\r\n      }\r\n    });\r\n  };\r\n\r\n  addTextBlock = () => {\r\n    const { canvasTexts } = this.state;\r\n    const { textBlocks } = canvasTexts;\r\n\r\n    const id = nanoid();\r\n    const newTextblock: ITextBlocksConfigPanelState = {\r\n      color: 'black',\r\n      fontSize: 'medium',\r\n      id,\r\n      text: ''\r\n    };\r\n\r\n    this.setState({\r\n      canvasTexts: {\r\n        ...canvasTexts,\r\n        textBlocks: {\r\n          ...textBlocks,\r\n          [id]: newTextblock\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  addTextBlockWithData = (id: string, text: string) => {\r\n    const { canvasTexts } = this.state;\r\n    const { textBlocks } = canvasTexts;\r\n\r\n    const newTextblock: ITextBlocksConfigPanelState = {\r\n      color: 'black',\r\n      fontSize: 'medium',\r\n      id,\r\n      text\r\n    };\r\n\r\n    this.setState({\r\n      canvasTexts: {\r\n        ...canvasTexts,\r\n        textBlocks: {\r\n          ...textBlocks,\r\n          [id]: newTextblock\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { canvasImage, canvasTexts, formValues } = this.state;\r\n    const { selectedTextBlock, textBlocks } = canvasTexts;\r\n\r\n    return (\r\n      <div css={pageStyle}>\r\n        <Nav onImageUploaded={this.setCanvasImage} />\r\n        <section data-name=\"bodycontainer\" css={containerStyle}>\r\n          <LeftSidebar\r\n            addTextBlock={this.addTextBlock}\r\n            canvasRef={this.stageRef}\r\n            formValues={formValues}\r\n            onTextBlockInteracted={this.setSelectedTextBlock}\r\n            selectedTextBlock={selectedTextBlock}\r\n            textBlocks={textBlocks}\r\n            onInputChanged={this.setAdoptionFormField}\r\n            onTextChanged={this.onTextChanged}\r\n            addTextBlockWithData={this.addTextBlockWithData}\r\n          />\r\n          <Canvas\r\n            canvasRef={this.stageRef}\r\n            canvasTexts={canvasTexts}\r\n            currentCanvasText={textBlocks[selectedTextBlock]}\r\n            image={canvasImage}\r\n            onRef={this.stageRef}\r\n            onTextChanged={this.onTextBlockChanged}\r\n            onTextBlockSelected={this.setSelectedTextBlock}\r\n          />\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n\r\n","import { css } from '@emotion/core';\r\n\r\nexport const containerStyle = css`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n  padding-top: 1rem;\r\n  padding-bottom: 4rem;\r\n  width: 900px;\r\n`;\r\n\r\nexport const pageStyle = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n`;\r\n","module.exports = require(\"@blueprintjs/core\");","module.exports = require(\"@emotion/core\");","module.exports = require(\"nanoid\");","module.exports = require(\"react\");","module.exports = require(\"react-dom\");","module.exports = require(\"react-konva\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AACA;AAEA;AAOA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAC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AAA;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACA;AAEA;AAQA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAtBA;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AAEA;AACA;AACA;AAiBA;AAAA;AAAA;AACA;AADA;AAoBA;AADA;AACA;AApBA;AACA;AADA;AA0BA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AApDA;AAsDA;AACA;AACA;AACA;AAFA;AAIA;AACA;AA5DA;AA8DA;AACA;AA/DA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA;AACA;AAlGA;AACA;AAmGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1HA;AACA;AACA;AAKA;AACA;AACA;AAWA;AAAA;AAAA;AACA;AADA;AAEA;AADA;AACA;AAFA;AAYA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAxBA;AA0BA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxCA;AACA;AAIA;AACA;AACA;AADA;AAGA;AACA;AAgCA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AACA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAJA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AA7EA;AACA;AA8EA;;;;;;;;;;;;ACnGA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AAEA;AACA;AACA;AAWA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAsCA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAjDA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAeA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AA9DA;AACA;AADA;AAEA;AADA;AACA;AA8DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChFA;AACA;AACA;AAGA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAmBA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAFA;AACA;AADA;AAeA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCA;AAuCA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAtDA;AAgEA;AACA;AACA;AACA;AACA;AApEA;AAsEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAKA;AACA;AAnGA;AAqGA;AAEA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAnHA;AAqHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5HA;AA8HA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AApIA;AAsIA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAFA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAcA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAvLA;AAyLA;AACA;AA1LA;AACA;AAsDA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA8HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA0BA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AA1PA;AACA;AA2PA;;;;;;;;;;;;AC9RA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAmCA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AANA;AACA;AAFA;AACA;AADA;AAgCA;AAAA;AAAA;AACA;AACA;AAEA;AAFA;AADA;AAMA;AACA;AAxCA;AA0CA;AACA;AADA;AAGA;AACA;AA9CA;AAgDA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AAFA;AAFA;AAFA;AADA;AAYA;AACA;AA/DA;AAiEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AAEA;AAFA;AAFA;AAFA;AADA;AAaA;AACA;AAEA;AACA;AArFA;AAuFA;AACA;AAEA;AAFA;AADA;AAMA;AACA;AA9FA;AAgGA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAEA;AAEA;AAFA;AAFA;AADA;AASA;AACA;AArHA;AAuHA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAEA;AAEA;AAFA;AAFA;AADA;AASA;AA1IA;AACA;AA0BA;AACA;AACA;AACA;AA8GA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AA5KA;AACA;AA6KA;;;;;;;;;;;;AC1NA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;;;;AAAA;AASA;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;ACXA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}